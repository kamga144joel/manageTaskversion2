import { Kind } from "graphql";
import { warnOnImproperCacheImplementation, SetImpl, MapImpl } from "./utils.mjs";
import { invariant } from "../utilities/globals/invariantWrappers.mjs";
import "../utilities/globals/global.mjs";
import equal from "@wry/equality";
import { maskDefinition } from "./maskDefinition.mjs";
import { createFragmentMap } from "../utilities/graphql/fragments.mjs";
import { getFragmentDefinitions } from "../utilities/graphql/getFromAST.mjs";
function maskFragment(data, document, cache, fragmentName) {
  if (!cache.fragmentMatches) {
    if (globalThis.__DEV__ !== false) {
      warnOnImproperCacheImplementation();
    }
    return data;
  }
  var fragments = document.definitions.filter(function(node) {
    return node.kind === Kind.FRAGMENT_DEFINITION;
  });
  if (typeof fragmentName === "undefined") {
    invariant(fragments.length === 1, 49, fragments.length);
    fragmentName = fragments[0].name.value;
  }
  var fragment = fragments.find(function(fragment2) {
    return fragment2.name.value === fragmentName;
  });
  invariant(!!fragment, 50, fragmentName);
  if (data == null) {
    return data;
  }
  if (equal(data, {})) {
    return data;
  }
  return maskDefinition(data, fragment.selectionSet, {
    operationType: "fragment",
    operationName: fragment.name.value,
    fragmentMap: createFragmentMap(getFragmentDefinitions(document)),
    cache,
    mutableTargets: new MapImpl(),
    knownChanged: new SetImpl()
  });
}
export {
  maskFragment
};
//# sourceMappingURL=maskFragment.mjs.map
