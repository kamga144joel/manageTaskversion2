{"file":"promise.mjs","mappings":";AAKe,SAAS,gBAAgB,SAAS;AAC7C,MAAI,WAAW;AACf,MAAI,WAAW;AAAA,IACX,MAAM,WAAY;AACd,UAAI;AACA,eAAO,QAAQ,QAAQ;AAAA,UACnB,OAAO;AAAA,UACP,MAAM;AAAA,QAC1B,CAAiB;AACL,iBAAW;AACX,aAAO,IAAI,QAAQ,SAAU,SAAS,QAAQ;AAC1C,gBACK,KAAK,SAAU,OAAO;AACvB,kBAAQ,EAAE,OAAc,MAAM,MAAK,CAAE;AAAA,QACxC,CAAA,EACI,MAAM,MAAM;AAAA,MACjC,CAAa;AAAA,IACJ;AAAA,EACJ;AACD,MAAI,2BAA2B;AAC3B,aAAS,OAAO,aAAa,IAAI,WAAY;AACzC,aAAO;AAAA,IACV;AAAA,EACT;AACI,SAAO;AACX;","names":[],"sources":["../../../../../../../../../../../../node_modules/@apollo/client/link/http/iterators/promise.js"],"sourcesContent":["/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/promise.ts\n */\nimport { canUseAsyncIteratorSymbol } from \"../../../utilities/index.js\";\nexport default function promiseIterator(promise) {\n    var resolved = false;\n    var iterator = {\n        next: function () {\n            if (resolved)\n                return Promise.resolve({\n                    value: undefined,\n                    done: true,\n                });\n            resolved = true;\n            return new Promise(function (resolve, reject) {\n                promise\n                    .then(function (value) {\n                    resolve({ value: value, done: false });\n                })\n                    .catch(reject);\n            });\n        },\n    };\n    if (canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function () {\n            return this;\n        };\n    }\n    return iterator;\n}\n//# sourceMappingURL=promise.js.map"],"version":3}