{"version":3,"file":"createHttpLink.mjs","sources":["../../../../../../../../../../../node_modules/@apollo/client/link/http/createHttpLink.js"],"sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable, hasDirectives } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport { handleError, readMultipartBody, parseAndCheckHttpResponse, } from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport { selectHttpOptionsAndBodyInternal, defaultPrinter, fallbackHttpConfig, } from \"./selectHttpOptionsAndBody.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError, filterOperationVariables } from \"../utils/index.js\";\nimport { maybe, getMainDefinition, removeClientSetsFromDocument, } from \"../../utilities/index.js\";\nvar backupFetch = maybe(function () { return fetch; });\nexport var createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var _a = linkOptions.uri, uri = _a === void 0 ? \"/graphql\" : _a, \n    // use default global fetch if nothing passed in\n    preferredFetch = linkOptions.fetch, _b = linkOptions.print, print = _b === void 0 ? defaultPrinter : _b, includeExtensions = linkOptions.includeExtensions, preserveHeaderCase = linkOptions.preserveHeaderCase, useGETForQueries = linkOptions.useGETForQueries, _c = linkOptions.includeUnusedVariables, includeUnusedVariables = _c === void 0 ? false : _c, requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"print\", \"includeExtensions\", \"preserveHeaderCase\", \"useGETForQueries\", \"includeUnusedVariables\"]);\n    if (globalThis.__DEV__ !== false) {\n        // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n        // defined, so requests won't fail at runtime.\n        checkFetcher(preferredFetch || backupFetch);\n    }\n    var linkConfig = {\n        http: { includeExtensions: includeExtensions, preserveHeaderCase: preserveHeaderCase },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers,\n    };\n    return new ApolloLink(function (operation) {\n        var chosenURI = selectURI(operation, uri);\n        var context = operation.getContext();\n        // `apollographql-client-*` headers are automatically set if a\n        // `clientAwareness` object is found in the context. These headers are\n        // set first, followed by the rest of the headers pulled from\n        // `context.headers`. If desired, `apollographql-client-*` headers set by\n        // the `clientAwareness` object can be overridden by\n        // `apollographql-client-*` headers set in `context.headers`.\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders[\"apollographql-client-name\"] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders[\"apollographql-client-version\"] = version;\n            }\n        }\n        var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders,\n        };\n        if (hasDirectives([\"client\"], operation.query)) {\n            var transformedQuery = removeClientSetsFromDocument(operation.query);\n            if (!transformedQuery) {\n                return fromError(new Error(\"HttpLink: Trying to send a client-only query to the server. To send to the server, ensure a non-client field is added to the query or set the `transformOptions.removeClientFields` option to `true`.\"));\n            }\n            operation.query = transformedQuery;\n        }\n        //uses fallback, link, and then context to build options\n        var _b = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        if (body.variables && !includeUnusedVariables) {\n            body.variables = filterOperationVariables(body.variables, operation.query);\n        }\n        var controller;\n        if (!options.signal && typeof AbortController !== \"undefined\") {\n            controller = new AbortController();\n            options.signal = controller.signal;\n        }\n        // If requested, set method to GET if there are no mutations.\n        var definitionIsMutation = function (d) {\n            return d.kind === \"OperationDefinition\" && d.operation === \"mutation\";\n        };\n        var definitionIsSubscription = function (d) {\n            return d.kind === \"OperationDefinition\" && d.operation === \"subscription\";\n        };\n        var isSubscription = definitionIsSubscription(getMainDefinition(operation.query));\n        // does not match custom directives beginning with @defer\n        var hasDefer = hasDirectives([\"defer\"], operation.query);\n        if (useGETForQueries &&\n            !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = \"GET\";\n        }\n        if (hasDefer || isSubscription) {\n            options.headers = options.headers || {};\n            var acceptHeader = \"multipart/mixed;\";\n            // Omit defer-specific headers if the user attempts to defer a selection\n            // set on a subscription and log a warning.\n            if (isSubscription && hasDefer) {\n                globalThis.__DEV__ !== false && invariant.warn(41);\n            }\n            if (isSubscription) {\n                acceptHeader +=\n                    \"boundary=graphql;subscriptionSpec=1.0,application/json\";\n            }\n            else if (hasDefer) {\n                acceptHeader += \"deferSpec=20220824,application/json\";\n            }\n            options.headers.accept = acceptHeader;\n        }\n        if (options.method === \"GET\") {\n            var _c = rewriteURIForGET(chosenURI, body), newURI = _c.newURI, parseError = _c.parseError;\n            if (parseError) {\n                return fromError(parseError);\n            }\n            chosenURI = newURI;\n        }\n        else {\n            try {\n                options.body = serializeFetchParameter(body, \"Payload\");\n            }\n            catch (parseError) {\n                return fromError(parseError);\n            }\n        }\n        return new Observable(function (observer) {\n            // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n            // fall back to the *current* global window.fetch function (see issue\n            // #7832), or (if all else fails) the backupFetch function we saved when\n            // this module was first evaluated. This last option protects against the\n            // removal of window.fetch, which is unlikely but not impossible.\n            var currentFetch = preferredFetch || maybe(function () { return fetch; }) || backupFetch;\n            var observerNext = observer.next.bind(observer);\n            currentFetch(chosenURI, options)\n                .then(function (response) {\n                var _a;\n                operation.setContext({ response: response });\n                var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get(\"content-type\");\n                if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n                    return readMultipartBody(response, observerNext);\n                }\n                else {\n                    return parseAndCheckHttpResponse(operation)(response).then(observerNext);\n                }\n            })\n                .then(function () {\n                controller = undefined;\n                observer.complete();\n            })\n                .catch(function (err) {\n                controller = undefined;\n                handleError(err, observer);\n            });\n            return function () {\n                // XXX support canceling this request\n                // https://developers.google.com/web/updates/2017/09/abortable-fetch\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\n//# sourceMappingURL=createHttpLink.js.map"],"names":["_a","_b","_c","parseError"],"mappings":"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","x_google_ignoreList":[0]}