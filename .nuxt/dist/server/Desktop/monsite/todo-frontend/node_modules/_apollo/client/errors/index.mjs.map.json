{"file":"index.mjs","mappings":";;;;AAMU,IAAC,yBAAyB,OAAM;AACnC,SAAS,+BAA+B,QAAQ;AACnD,MAAI,OAAO,YAAY;AACnB,WAAO,MAAM,QAAQ,OAAO,WAAW,sBAAsB,CAAC;AAAA,EACtE;AACI,SAAO;AACX;AACO,SAAS,cAAc,KAAK;AAC/B,SAAO,IAAI,eAAe,eAAe;AAC7C;AAKA,IAAI,uBAAuB,SAAU,KAAK;AACtC,MAAI,SAAS,cAAc,cAAc,cAAc,CAAA,GAAI,IAAI,eAAe,IAAI,GAAG,IAAI,cAAc,IAAI,GAAG,IAAI,gBAAgB,IAAI;AACtI,MAAI,IAAI;AACJ,WAAO,KAAK,IAAI,YAAY;AAChC,SAAQ,OAEH,IAAI,SAAUA,MAAK;AACpB,WAAQ,gBAAgBA,IAAG,KAAKA,KAAI,WAAY;AAAA,EACnD,CAAA,EACI,KAAK,IAAI;AAClB;AACG,IAAC;AAAA;AAAA,EAA6B,SAAU,QAAQ;AAC/C,cAAUC,cAAa,MAAM;AAK7B,aAASA,aAAY,IAAI;AACrB,UAAI,gBAAgB,GAAG,eAAe,iBAAiB,GAAG,gBAAgB,eAAe,GAAG,cAAc,eAAe,GAAG,cAAc,eAAe,GAAG,cAAc,YAAY,GAAG;AACzL,UAAI,QAAQ,OAAO,KAAK,MAAM,YAAY,KAAK;AAC/C,YAAM,OAAO;AACb,YAAM,gBAAgB,iBAAiB,CAAE;AACzC,YAAM,iBAAiB,kBAAkB,CAAE;AAC3C,YAAM,eAAe,gBAAgB,CAAE;AACvC,YAAM,eAAe,gBAAgB;AACrC,YAAM,UAAU,gBAAgB,qBAAqB,KAAK;AAC1D,YAAM,YAAY;AAClB,YAAM,QACF,cAAc,cAAc,cAAc;AAAA,QACtC;AAAA,MAChB,GAAgB,iBAAiB,CAAE,GAAG,IAAI,GAAI,kBAAkB,IAAK,IAAI,GAAI,gBAAgB,CAAA,GAAK,IAAI,EAAE,KAAK,SAAU,GAAG;AAAE,eAAO,CAAC,CAAC;AAAA,MAAI,CAAA,KAAK;AAGtI,YAAM,YAAYA,aAAY;AAC9B,aAAO;AAAA,IACf;AACI,WAAOA;AAAA,EACX,EAAE,KAAK;AAAA;","names":["err","ApolloError"],"sources":["../../../../../../../../../../node_modules/@apollo/client/errors/index.js"],"sourcesContent":["import { __extends, __spreadArray } from \"tslib\";\nimport \"../utilities/globals/index.js\";\nimport { isNonNullObject } from \"../utilities/index.js\";\n// This Symbol allows us to pass transport-specific errors from the link chain\n// into QueryManager/client internals without risking a naming collision within\n// extensions (which implementers can use as they see fit).\nexport var PROTOCOL_ERRORS_SYMBOL = Symbol();\nexport function graphQLResultHasProtocolErrors(result) {\n    if (result.extensions) {\n        return Array.isArray(result.extensions[PROTOCOL_ERRORS_SYMBOL]);\n    }\n    return false;\n}\nexport function isApolloError(err) {\n    return err.hasOwnProperty(\"graphQLErrors\");\n}\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nvar generateErrorMessage = function (err) {\n    var errors = __spreadArray(__spreadArray(__spreadArray([], err.graphQLErrors, true), err.clientErrors, true), err.protocolErrors, true);\n    if (err.networkError)\n        errors.push(err.networkError);\n    return (errors\n        // The rest of the code sometimes unsafely types non-Error objects as GraphQLErrors\n        .map(function (err) {\n        return (isNonNullObject(err) && err.message) || \"Error message not found.\";\n    })\n        .join(\"\\n\"));\n};\nvar ApolloError = /** @class */ (function (_super) {\n    __extends(ApolloError, _super);\n    // Constructs an instance of ApolloError given serialized GraphQL errors,\n    // client errors, protocol errors or network errors.\n    // Note that one of these has to be a valid\n    // value or the constructed error will be meaningless.\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, protocolErrors = _a.protocolErrors, clientErrors = _a.clientErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.name = \"ApolloError\";\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.protocolErrors = protocolErrors || [];\n        _this.clientErrors = clientErrors || [];\n        _this.networkError = networkError || null;\n        _this.message = errorMessage || generateErrorMessage(_this);\n        _this.extraInfo = extraInfo;\n        _this.cause =\n            __spreadArray(__spreadArray(__spreadArray([\n                networkError\n            ], (graphQLErrors || []), true), (protocolErrors || []), true), (clientErrors || []), true).find(function (e) { return !!e; }) || null;\n        // We're not using `Object.setPrototypeOf` here as it isn't fully\n        // supported on Android (see issue #3236).\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error));\nexport { ApolloError };\n//# sourceMappingURL=index.js.map"],"version":3}