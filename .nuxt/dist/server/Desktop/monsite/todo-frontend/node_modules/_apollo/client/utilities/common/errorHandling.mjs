import { isNonEmptyArray } from "./arrays.mjs";
import { isExecutionPatchIncrementalResult } from "./incrementalResult.mjs";
function graphQLResultHasError(result) {
  var errors = getGraphQLErrorsFromResult(result);
  return isNonEmptyArray(errors);
}
function getGraphQLErrorsFromResult(result) {
  var graphQLErrors = isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];
  if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {
    result.incremental.forEach(function(incrementalResult) {
      if (incrementalResult.errors) {
        graphQLErrors.push.apply(graphQLErrors, incrementalResult.errors);
      }
    });
  }
  return graphQLErrors;
}
export {
  getGraphQLErrorsFromResult,
  graphQLResultHasError
};
//# sourceMappingURL=errorHandling.mjs.map
