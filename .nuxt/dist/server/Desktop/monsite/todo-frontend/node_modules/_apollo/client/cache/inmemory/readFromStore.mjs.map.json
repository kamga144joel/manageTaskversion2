{"file":"readFromStore.mjs","mappings":"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","names":["StoreReader","result","_a"],"sources":["../../../../../../../../../../../node_modules/@apollo/client/cache/inmemory/readFromStore.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { invariant, newInvariantError } from \"../../utilities/globals/index.js\";\nimport { Kind } from \"graphql\";\nimport { wrap } from \"optimism\";\nimport { isField, resultKeyNameFromField, isReference, makeReference, shouldInclude, addTypenameToDocument, getDefaultValues, getMainDefinition, getQueryDefinition, getFragmentFromSelection, maybeDeepFreeze, mergeDeepArray, DeepMerger, isNonNullObject, canUseWeakMap, compact, canonicalStringify, cacheSizes, } from \"../../utilities/index.js\";\nimport { maybeDependOnExistenceOfEntity, supportsResultCaching, } from \"./entityStore.js\";\nimport { isArray, extractFragmentContext, getTypenameFromStoreObject, shouldCanonizeResults, } from \"./helpers.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { ObjectCanon } from \"./object-canon.js\";\nfunction execSelectionSetKeyArgs(options) {\n    return [\n        options.selectionSet,\n        options.objectOrReference,\n        options.context,\n        // We split out this property so we can pass different values\n        // independently without modifying options.context itself.\n        options.context.canonizeResults,\n    ];\n}\nvar StoreReader = /** @class */ (function () {\n    function StoreReader(config) {\n        var _this = this;\n        this.knownResults = new (canUseWeakMap ? WeakMap : Map)();\n        this.config = compact(config, {\n            addTypename: config.addTypename !== false,\n            canonizeResults: shouldCanonizeResults(config),\n        });\n        this.canon = config.canon || new ObjectCanon();\n        // memoized functions in this class will be \"garbage-collected\"\n        // by recreating the whole `StoreReader` in\n        // `InMemoryCache.resetResultsCache`\n        // (triggered from `InMemoryCache.gc` with `resetResultCache: true`)\n        this.executeSelectionSet = wrap(function (options) {\n            var _a;\n            var canonizeResults = options.context.canonizeResults;\n            var peekArgs = execSelectionSetKeyArgs(options);\n            // Negate this boolean option so we can find out if we've already read\n            // this result using the other boolean value.\n            peekArgs[3] = !canonizeResults;\n            var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);\n            if (other) {\n                if (canonizeResults) {\n                    return __assign(__assign({}, other), { \n                        // If we previously read this result without canonizing it, we can\n                        // reuse that result simply by canonizing it now.\n                        result: _this.canon.admit(other.result) });\n                }\n                // If we previously read this result with canonization enabled, we can\n                // return that canonized result as-is.\n                return other;\n            }\n            maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n            // Finally, if we didn't find any useful previous results, run the real\n            // execSelectionSetImpl method with the given options.\n            return _this.execSelectionSetImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize ||\n                cacheSizes[\"inMemoryCache.executeSelectionSet\"] ||\n                50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */,\n            keyArgs: execSelectionSetKeyArgs,\n            // Note that the parameters of makeCacheKey are determined by the\n            // array returned by keyArgs.\n            makeCacheKey: function (selectionSet, parent, context, canonizeResults) {\n                if (supportsResultCaching(context.store)) {\n                    return context.store.makeCacheKey(selectionSet, isReference(parent) ? parent.__ref : parent, context.varString, canonizeResults);\n                }\n            },\n        });\n        this.executeSubSelectedArray = wrap(function (options) {\n            maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n            return _this.execSubSelectedArrayImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize ||\n                cacheSizes[\"inMemoryCache.executeSubSelectedArray\"] ||\n                10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */,\n            makeCacheKey: function (_a) {\n                var field = _a.field, array = _a.array, context = _a.context;\n                if (supportsResultCaching(context.store)) {\n                    return context.store.makeCacheKey(field, array, context.varString);\n                }\n            },\n        });\n    }\n    StoreReader.prototype.resetCanon = function () {\n        this.canon = new ObjectCanon();\n    };\n    /**\n     * Given a store and a query, return as much of the result as possible and\n     * identify if any data was missing from the store.\n     */\n    StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n        var store = _a.store, query = _a.query, _b = _a.rootId, rootId = _b === void 0 ? \"ROOT_QUERY\" : _b, variables = _a.variables, _c = _a.returnPartialData, returnPartialData = _c === void 0 ? true : _c, _d = _a.canonizeResults, canonizeResults = _d === void 0 ? this.config.canonizeResults : _d;\n        var policies = this.config.cache.policies;\n        variables = __assign(__assign({}, getDefaultValues(getQueryDefinition(query))), variables);\n        var rootRef = makeReference(rootId);\n        var execResult = this.executeSelectionSet({\n            selectionSet: getMainDefinition(query).selectionSet,\n            objectOrReference: rootRef,\n            enclosingRef: rootRef,\n            context: __assign({ store: store, query: query, policies: policies, variables: variables, varString: canonicalStringify(variables), canonizeResults: canonizeResults }, extractFragmentContext(query, this.config.fragments)),\n        });\n        var missing;\n        if (execResult.missing) {\n            // For backwards compatibility we still report an array of\n            // MissingFieldError objects, even though there will only ever be at most\n            // one of them, now that all missing field error messages are grouped\n            // together in the execResult.missing tree.\n            missing = [\n                new MissingFieldError(firstMissing(execResult.missing), execResult.missing, query, variables),\n            ];\n            if (!returnPartialData) {\n                throw missing[0];\n            }\n        }\n        return {\n            result: execResult.result,\n            complete: !missing,\n            missing: missing,\n        };\n    };\n    StoreReader.prototype.isFresh = function (result, parent, selectionSet, context) {\n        if (supportsResultCaching(context.store) &&\n            this.knownResults.get(result) === selectionSet) {\n            var latest = this.executeSelectionSet.peek(selectionSet, parent, context, \n            // If result is canonical, then it could only have been previously\n            // cached by the canonizing version of executeSelectionSet, so we can\n            // avoid checking both possibilities here.\n            this.canon.isKnown(result));\n            if (latest && result === latest.result) {\n                return true;\n            }\n        }\n        return false;\n    };\n    // Uncached version of executeSelectionSet.\n    StoreReader.prototype.execSelectionSetImpl = function (_a) {\n        var _this = this;\n        var selectionSet = _a.selectionSet, objectOrReference = _a.objectOrReference, enclosingRef = _a.enclosingRef, context = _a.context;\n        if (isReference(objectOrReference) &&\n            !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n            !context.store.has(objectOrReference.__ref)) {\n            return {\n                result: this.canon.empty,\n                missing: \"Dangling reference to missing \".concat(objectOrReference.__ref, \" object\"),\n            };\n        }\n        var variables = context.variables, policies = context.policies, store = context.store;\n        var typename = store.getFieldValue(objectOrReference, \"__typename\");\n        var objectsToMerge = [];\n        var missing;\n        var missingMerger = new DeepMerger();\n        if (this.config.addTypename &&\n            typeof typename === \"string\" &&\n            !policies.rootIdsByTypename[typename]) {\n            // Ensure we always include a default value for the __typename\n            // field, if we have one, and this.config.addTypename is true. Note\n            // that this field can be overridden by other merged objects.\n            objectsToMerge.push({ __typename: typename });\n        }\n        function handleMissing(result, resultName) {\n            var _a;\n            if (result.missing) {\n                missing = missingMerger.merge(missing, (_a = {},\n                    _a[resultName] = result.missing,\n                    _a));\n            }\n            return result.result;\n        }\n        var workSet = new Set(selectionSet.selections);\n        workSet.forEach(function (selection) {\n            var _a, _b;\n            // Omit fields with directives @skip(if: <truthy value>) or\n            // @include(if: <falsy value>).\n            if (!shouldInclude(selection, variables))\n                return;\n            if (isField(selection)) {\n                var fieldValue = policies.readField({\n                    fieldName: selection.name.value,\n                    field: selection,\n                    variables: context.variables,\n                    from: objectOrReference,\n                }, context);\n                var resultName = resultKeyNameFromField(selection);\n                if (fieldValue === void 0) {\n                    if (!addTypenameToDocument.added(selection)) {\n                        missing = missingMerger.merge(missing, (_a = {},\n                            _a[resultName] = \"Can't find field '\".concat(selection.name.value, \"' on \").concat(isReference(objectOrReference) ?\n                                objectOrReference.__ref + \" object\"\n                                : \"object \" + JSON.stringify(objectOrReference, null, 2)),\n                            _a));\n                    }\n                }\n                else if (isArray(fieldValue)) {\n                    if (fieldValue.length > 0) {\n                        fieldValue = handleMissing(_this.executeSubSelectedArray({\n                            field: selection,\n                            array: fieldValue,\n                            enclosingRef: enclosingRef,\n                            context: context,\n                        }), resultName);\n                    }\n                }\n                else if (!selection.selectionSet) {\n                    // If the field does not have a selection set, then we handle it\n                    // as a scalar value. To keep this.canon from canonicalizing\n                    // this value, we use this.canon.pass to wrap fieldValue in a\n                    // Pass object that this.canon.admit will later unwrap as-is.\n                    if (context.canonizeResults) {\n                        fieldValue = _this.canon.pass(fieldValue);\n                    }\n                }\n                else if (fieldValue != null) {\n                    // In this case, because we know the field has a selection set,\n                    // it must be trying to query a GraphQLObjectType, which is why\n                    // fieldValue must be != null.\n                    fieldValue = handleMissing(_this.executeSelectionSet({\n                        selectionSet: selection.selectionSet,\n                        objectOrReference: fieldValue,\n                        enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n                        context: context,\n                    }), resultName);\n                }\n                if (fieldValue !== void 0) {\n                    objectsToMerge.push((_b = {}, _b[resultName] = fieldValue, _b));\n                }\n            }\n            else {\n                var fragment = getFragmentFromSelection(selection, context.lookupFragment);\n                if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n                    throw newInvariantError(10, selection.name.value);\n                }\n                if (fragment && policies.fragmentMatches(fragment, typename)) {\n                    fragment.selectionSet.selections.forEach(workSet.add, workSet);\n                }\n            }\n        });\n        var result = mergeDeepArray(objectsToMerge);\n        var finalResult = { result: result, missing: missing };\n        var frozen = context.canonizeResults ?\n            this.canon.admit(finalResult)\n            // Since this.canon is normally responsible for freezing results (only in\n            // development), freeze them manually if canonization is disabled.\n            : maybeDeepFreeze(finalResult);\n        // Store this result with its selection set so that we can quickly\n        // recognize it again in the StoreReader#isFresh method.\n        if (frozen.result) {\n            this.knownResults.set(frozen.result, selectionSet);\n        }\n        return frozen;\n    };\n    // Uncached version of executeSubSelectedArray.\n    StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {\n        var _this = this;\n        var field = _a.field, array = _a.array, enclosingRef = _a.enclosingRef, context = _a.context;\n        var missing;\n        var missingMerger = new DeepMerger();\n        function handleMissing(childResult, i) {\n            var _a;\n            if (childResult.missing) {\n                missing = missingMerger.merge(missing, (_a = {}, _a[i] = childResult.missing, _a));\n            }\n            return childResult.result;\n        }\n        if (field.selectionSet) {\n            array = array.filter(context.store.canRead);\n        }\n        array = array.map(function (item, i) {\n            // null value in array\n            if (item === null) {\n                return null;\n            }\n            // This is a nested array, recurse\n            if (isArray(item)) {\n                return handleMissing(_this.executeSubSelectedArray({\n                    field: field,\n                    array: item,\n                    enclosingRef: enclosingRef,\n                    context: context,\n                }), i);\n            }\n            // This is an object, run the selection set on it\n            if (field.selectionSet) {\n                return handleMissing(_this.executeSelectionSet({\n                    selectionSet: field.selectionSet,\n                    objectOrReference: item,\n                    enclosingRef: isReference(item) ? item : enclosingRef,\n                    context: context,\n                }), i);\n            }\n            if (globalThis.__DEV__ !== false) {\n                assertSelectionSetForIdValue(context.store, field, item);\n            }\n            return item;\n        });\n        return {\n            result: context.canonizeResults ? this.canon.admit(array) : array,\n            missing: missing,\n        };\n    };\n    return StoreReader;\n}());\nexport { StoreReader };\nfunction firstMissing(tree) {\n    try {\n        JSON.stringify(tree, function (_, value) {\n            if (typeof value === \"string\")\n                throw value;\n            return value;\n        });\n    }\n    catch (result) {\n        return result;\n    }\n}\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n    if (!field.selectionSet) {\n        var workSet_1 = new Set([fieldValue]);\n        workSet_1.forEach(function (value) {\n            if (isNonNullObject(value)) {\n                invariant(\n                    !isReference(value),\n                    11,\n                    getTypenameFromStoreObject(store, value),\n                    field.name.value\n                );\n                Object.values(value).forEach(workSet_1.add, workSet_1);\n            }\n        });\n    }\n}\n//# sourceMappingURL=readFromStore.js.map"],"version":3}