{"file":"selectHttpOptionsAndBody.mjs","mappings":";;AAEA,IAAI,qBAAqB;AAAA,EACrB,cAAc;AAAA,EACd,mBAAmB;AAAA,EACnB,oBAAoB;AACxB;AACA,IAAI,iBAAiB;AAAA;AAAA,EAEjB,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaR,gBAAgB;AACpB;AACA,IAAI,iBAAiB;AAAA,EACjB,QAAQ;AACZ;AACU,IAAC,qBAAqB;AAAA,EAC5B,MAAM;AAAA,EACN,SAAS;AAAA,EACT,SAAS;AACb;AACU,IAAC,iBAAiB,SAAU,KAAK,SAAS;AAAE,SAAO,QAAQ,GAAG;AAAE;AAUnE,SAAS,iCAAiC,WAAW,SAAS;AACjE,MAAI,UAAU,CAAE;AAChB,WAAS,KAAK,GAAG,KAAK,UAAU,QAAQ,MAAM;AAC1C,YAAQ,KAAK,CAAC,IAAI,UAAU,EAAE;AAAA,EACtC;AACI,MAAI,UAAU,CAAE;AAChB,MAAI,OAAO,CAAE;AACb,UAAQ,QAAQ,SAAU,QAAQ;AAC9B,cAAU,SAAS,SAAS,SAAS,CAAE,GAAE,OAAO,GAAG,OAAO,OAAO,GAAG,EAAE,SAAS,SAAS,SAAS,IAAI,QAAQ,OAAO,GAAG,OAAO,OAAO,GAAG;AACxI,QAAI,OAAO,aAAa;AACpB,cAAQ,cAAc,OAAO;AAAA,IACzC;AACQ,WAAO,SAAS,SAAS,CAAA,GAAI,IAAI,GAAG,OAAO,IAAI;AAAA,EACvD,CAAK;AACD,MAAI,QAAQ,SAAS;AACjB,YAAQ,UAAU,uBAAuB,QAAQ,SAAS,KAAK,kBAAkB;AAAA,EACzF;AAEI,MAAI,gBAAgB,UAAU,eAAe,aAAa,UAAU,YAAY,YAAY,UAAU,WAAW,QAAQ,UAAU;AACnI,MAAI,OAAO,EAAE,eAA8B,UAAsB;AACjE,MAAI,KAAK;AACL,SAAK,aAAa;AAEtB,MAAI,KAAK;AACL,SAAK,QAAQ,QAAQ,OAAO,KAAK;AACrC,SAAO;AAAA,IACH;AAAA,IACA;AAAA,EACH;AACL;AAIA,SAAS,uBAAuB,SAAS,oBAAoB;AAEzD,MAAI,CAAC,oBAAoB;AACrB,QAAI,sBAAsB,CAAE;AAC5B,WAAO,KAAK,OAAO,OAAO,CAAC,EAAE,QAAQ,SAAU,MAAM;AACjD,0BAAoB,KAAK,YAAa,CAAA,IAAI,QAAQ,IAAI;AAAA,IAClE,CAAS;AACD,WAAO;AAAA,EACf;AAKI,MAAI,aAAa,CAAE;AACnB,SAAO,KAAK,OAAO,OAAO,CAAC,EAAE,QAAQ,SAAU,MAAM;AACjD,eAAW,KAAK,YAAW,CAAE,IAAI;AAAA,MAC7B,cAAc;AAAA,MACd,OAAO,QAAQ,IAAI;AAAA,IACtB;AAAA,EACT,CAAK;AACD,MAAI,oBAAoB,CAAE;AAC1B,SAAO,KAAK,UAAU,EAAE,QAAQ,SAAU,MAAM;AAC5C,sBAAkB,WAAW,IAAI,EAAE,YAAY,IAAI,WAAW,IAAI,EAAE;AAAA,EAC5E,CAAK;AACD,SAAO;AACX;","names":[],"sources":["../../../../../../../../../../../node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js"],"sourcesContent":["import { __assign, __spreadArray } from \"tslib\";\nimport { print } from \"../../utilities/index.js\";\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n    preserveHeaderCase: false,\n};\nvar defaultHeaders = {\n    // headers are case insensitive (https://stackoverflow.com/a/5259004)\n    accept: \"*/*\",\n    // The content-type header describes the type of the body of the request, and\n    // so it typically only is sent with requests that actually have bodies. One\n    // could imagine that Apollo Client would remove this header when constructing\n    // a GET request (which has no body), but we historically have not done that.\n    // This means that browsers will preflight all Apollo Client requests (even\n    // GET requests). Apollo Server's CSRF prevention feature (introduced in\n    // AS3.7) takes advantage of this fact and does not block requests with this\n    // header. If you want to drop this header from GET requests, then you should\n    // probably replace it with a `apollo-require-preflight` header, or servers\n    // with CSRF prevention enabled might block your GET request. See\n    // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf\n    // for more details.\n    \"content-type\": \"application/json\",\n};\nvar defaultOptions = {\n    method: \"POST\",\n};\nexport var fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions,\n};\nexport var defaultPrinter = function (ast, printer) { return printer(ast); };\nexport function selectHttpOptionsAndBody(operation, fallbackConfig) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    configs.unshift(fallbackConfig);\n    return selectHttpOptionsAndBodyInternal.apply(void 0, __spreadArray([operation,\n        defaultPrinter], configs, false));\n}\nexport function selectHttpOptionsAndBodyInternal(operation, printer) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = {};\n    var http = {};\n    configs.forEach(function (config) {\n        options = __assign(__assign(__assign({}, options), config.options), { headers: __assign(__assign({}, options.headers), config.headers) });\n        if (config.credentials) {\n            options.credentials = config.credentials;\n        }\n        http = __assign(__assign({}, http), config.http);\n    });\n    if (options.headers) {\n        options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);\n    }\n    //The body depends on the http options\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = { operationName: operationName, variables: variables };\n    if (http.includeExtensions)\n        body.extensions = extensions;\n    // not sending the query (i.e persisted queries)\n    if (http.includeQuery)\n        body.query = printer(query, print);\n    return {\n        options: options,\n        body: body,\n    };\n}\n// Remove potential duplicate header names, preserving last (by insertion order).\n// This is done to prevent unintentionally duplicating a header instead of\n// overwriting it (See #8447 and #8449).\nfunction removeDuplicateHeaders(headers, preserveHeaderCase) {\n    // If we're not preserving the case, just remove duplicates w/ normalization.\n    if (!preserveHeaderCase) {\n        var normalizedHeaders_1 = {};\n        Object.keys(Object(headers)).forEach(function (name) {\n            normalizedHeaders_1[name.toLowerCase()] = headers[name];\n        });\n        return normalizedHeaders_1;\n    }\n    // If we are preserving the case, remove duplicates w/ normalization,\n    // preserving the original name.\n    // This allows for non-http-spec-compliant servers that expect intentionally\n    // capitalized header names (See #6741).\n    var headerData = {};\n    Object.keys(Object(headers)).forEach(function (name) {\n        headerData[name.toLowerCase()] = {\n            originalName: name,\n            value: headers[name],\n        };\n    });\n    var normalizedHeaders = {};\n    Object.keys(headerData).forEach(function (name) {\n        normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n    });\n    return normalizedHeaders;\n}\n//# sourceMappingURL=selectHttpOptionsAndBody.js.map"],"version":3}