{"version":3,"file":"index.mjs","sources":["../../../../../../../../../../../node_modules/@apollo/client/link/error/index.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { graphQLResultHasProtocolErrors, PROTOCOL_ERRORS_SYMBOL, } from \"../../errors/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { ApolloLink } from \"../core/index.js\";\nexport function onError(errorHandler) {\n    return new ApolloLink(function (operation, forward) {\n        return new Observable(function (observer) {\n            var sub;\n            var retriedSub;\n            var retriedResult;\n            try {\n                sub = forward(operation).subscribe({\n                    next: function (result) {\n                        if (result.errors) {\n                            retriedResult = errorHandler({\n                                graphQLErrors: result.errors,\n                                response: result,\n                                operation: operation,\n                                forward: forward,\n                            });\n                        }\n                        else if (graphQLResultHasProtocolErrors(result)) {\n                            retriedResult = errorHandler({\n                                protocolErrors: result.extensions[PROTOCOL_ERRORS_SYMBOL],\n                                response: result,\n                                operation: operation,\n                                forward: forward,\n                            });\n                        }\n                        if (retriedResult) {\n                            retriedSub = retriedResult.subscribe({\n                                next: observer.next.bind(observer),\n                                error: observer.error.bind(observer),\n                                complete: observer.complete.bind(observer),\n                            });\n                            return;\n                        }\n                        observer.next(result);\n                    },\n                    error: function (networkError) {\n                        retriedResult = errorHandler({\n                            operation: operation,\n                            networkError: networkError,\n                            //Network errors can return GraphQL errors on for example a 403\n                            graphQLErrors: (networkError &&\n                                networkError.result &&\n                                networkError.result.errors) ||\n                                void 0,\n                            forward: forward,\n                        });\n                        if (retriedResult) {\n                            retriedSub = retriedResult.subscribe({\n                                next: observer.next.bind(observer),\n                                error: observer.error.bind(observer),\n                                complete: observer.complete.bind(observer),\n                            });\n                            return;\n                        }\n                        observer.error(networkError);\n                    },\n                    complete: function () {\n                        // disable the previous sub from calling complete on observable\n                        // if retry is in flight.\n                        if (!retriedResult) {\n                            observer.complete.bind(observer)();\n                        }\n                    },\n                });\n            }\n            catch (e) {\n                errorHandler({ networkError: e, operation: operation, forward: forward });\n                observer.error(e);\n            }\n            return function () {\n                if (sub)\n                    sub.unsubscribe();\n                if (retriedSub)\n                    sub.unsubscribe();\n            };\n        });\n    });\n}\nvar ErrorLink = /** @class */ (function (_super) {\n    __extends(ErrorLink, _super);\n    function ErrorLink(errorHandler) {\n        var _this = _super.call(this) || this;\n        _this.link = onError(errorHandler);\n        return _this;\n    }\n    ErrorLink.prototype.request = function (operation, forward) {\n        return this.link.request(operation, forward);\n    };\n    return ErrorLink;\n}(ApolloLink));\nexport { ErrorLink };\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":";;;;;AAIO,SAAS,QAAQ,cAAc;AAClC,SAAO,IAAI,WAAW,SAAU,WAAW,SAAS;AAChD,WAAO,IAAI,WAAW,SAAU,UAAU;AACtC,UAAI;AACJ,UAAI;AACJ,UAAI;AACJ,UAAI;AACA,cAAM,QAAQ,SAAS,EAAE,UAAU;AAAA,UAC/B,MAAM,SAAU,QAAQ;AACpB,gBAAI,OAAO,QAAQ;AACf,8BAAgB,aAAa;AAAA,gBACzB,eAAe,OAAO;AAAA,gBACtB,UAAU;AAAA,gBACV;AAAA,gBACA;AAAA,cAChC,CAA6B;AAAA,YAC7B,WACiC,+BAA+B,MAAM,GAAG;AAC7C,8BAAgB,aAAa;AAAA,gBACzB,gBAAgB,OAAO,WAAW,sBAAsB;AAAA,gBACxD,UAAU;AAAA,gBACV;AAAA,gBACA;AAAA,cAChC,CAA6B;AAAA,YAC7B;AACwB,gBAAI,eAAe;AACf,2BAAa,cAAc,UAAU;AAAA,gBACjC,MAAM,SAAS,KAAK,KAAK,QAAQ;AAAA,gBACjC,OAAO,SAAS,MAAM,KAAK,QAAQ;AAAA,gBACnC,UAAU,SAAS,SAAS,KAAK,QAAQ;AAAA,cACzE,CAA6B;AACD;AAAA,YAC5B;AACwB,qBAAS,KAAK,MAAM;AAAA,UACvB;AAAA,UACD,OAAO,SAAU,cAAc;AAC3B,4BAAgB,aAAa;AAAA,cACzB;AAAA,cACA;AAAA;AAAA,cAEA,eAAgB,gBACZ,aAAa,UACb,aAAa,OAAO,UACpB;AAAA,cACJ;AAAA,YAC5B,CAAyB;AACD,gBAAI,eAAe;AACf,2BAAa,cAAc,UAAU;AAAA,gBACjC,MAAM,SAAS,KAAK,KAAK,QAAQ;AAAA,gBACjC,OAAO,SAAS,MAAM,KAAK,QAAQ;AAAA,gBACnC,UAAU,SAAS,SAAS,KAAK,QAAQ;AAAA,cACzE,CAA6B;AACD;AAAA,YAC5B;AACwB,qBAAS,MAAM,YAAY;AAAA,UAC9B;AAAA,UACD,UAAU,WAAY;AAGlB,gBAAI,CAAC,eAAe;AAChB,uBAAS,SAAS,KAAK,QAAQ,EAAG;AAAA,YAC9D;AAAA,UACqB;AAAA,QACrB,CAAiB;AAAA,MACjB,SACmB,GAAG;AACN,qBAAa,EAAE,cAAc,GAAG,WAAsB,SAAkB;AACxE,iBAAS,MAAM,CAAC;AAAA,MAChC;AACY,aAAO,WAAY;AACf,YAAI;AACA,cAAI,YAAa;AACrB,YAAI;AACA,cAAI,YAAa;AAAA,MACxB;AAAA,IACb,CAAS;AAAA,EACT,CAAK;AACL;AAAA,CAC+B,SAAU,QAAQ;AAC7C,YAAU,WAAW,MAAM;AAC3B,WAAS,UAAU,cAAc;AAC7B,QAAI,QAAQ,OAAO,KAAK,IAAI,KAAK;AACjC,UAAM,OAAO,QAAQ,YAAY;AACjC,WAAO;AAAA,EACf;AACI,YAAU,UAAU,UAAU,SAAU,WAAW,SAAS;AACxD,WAAO,KAAK,KAAK,QAAQ,WAAW,OAAO;AAAA,EAC9C;AACD,SAAO;AACX,GAAE,UAAU;","x_google_ignoreList":[0]}