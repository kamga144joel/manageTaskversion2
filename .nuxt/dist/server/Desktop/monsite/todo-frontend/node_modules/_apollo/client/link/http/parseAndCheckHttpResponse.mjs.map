{"version":3,"file":"parseAndCheckHttpResponse.mjs","sources":["../../../../../../../../../../../node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js"],"sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { responseIterator } from \"./responseIterator.js\";\nimport { throwServerError } from \"../utils/index.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../../errors/index.js\";\nimport { isApolloPayloadResult } from \"../../utilities/common/incrementalResult.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function readMultipartBody(response, nextValue) {\n    return __awaiter(this, void 0, void 0, function () {\n        var decoder, contentType, delimiter, boundaryVal, boundary, buffer, iterator, running, _a, value, done, chunk, searchFrom, bi, message, i, headers, contentType_1, body, result, next;\n        var _b, _c;\n        var _d;\n        return __generator(this, function (_e) {\n            switch (_e.label) {\n                case 0:\n                    if (TextDecoder === undefined) {\n                        throw new Error(\"TextDecoder must be defined in the environment: please import a polyfill.\");\n                    }\n                    decoder = new TextDecoder(\"utf-8\");\n                    contentType = (_d = response.headers) === null || _d === void 0 ? void 0 : _d.get(\"content-type\");\n                    delimiter = \"boundary=\";\n                    boundaryVal = (contentType === null || contentType === void 0 ? void 0 : contentType.includes(delimiter)) ?\n                        contentType === null || contentType === void 0 ? void 0 : contentType.substring((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(delimiter)) + delimiter.length).replace(/['\"]/g, \"\").replace(/\\;(.*)/gm, \"\").trim()\n                        : \"-\";\n                    boundary = \"\\r\\n--\".concat(boundaryVal);\n                    buffer = \"\";\n                    iterator = responseIterator(response);\n                    running = true;\n                    _e.label = 1;\n                case 1:\n                    if (!running) return [3 /*break*/, 3];\n                    return [4 /*yield*/, iterator.next()];\n                case 2:\n                    _a = _e.sent(), value = _a.value, done = _a.done;\n                    chunk = typeof value === \"string\" ? value : decoder.decode(value);\n                    searchFrom = buffer.length - boundary.length + 1;\n                    running = !done;\n                    buffer += chunk;\n                    bi = buffer.indexOf(boundary, searchFrom);\n                    while (bi > -1) {\n                        message = void 0;\n                        _b = [\n                            buffer.slice(0, bi),\n                            buffer.slice(bi + boundary.length),\n                        ], message = _b[0], buffer = _b[1];\n                        i = message.indexOf(\"\\r\\n\\r\\n\");\n                        headers = parseHeaders(message.slice(0, i));\n                        contentType_1 = headers[\"content-type\"];\n                        if (contentType_1 &&\n                            contentType_1.toLowerCase().indexOf(\"application/json\") === -1) {\n                            throw new Error(\"Unsupported patch content type: application/json is required.\");\n                        }\n                        body = message.slice(i);\n                        if (body) {\n                            result = parseJsonBody(response, body);\n                            if (Object.keys(result).length > 1 ||\n                                \"data\" in result ||\n                                \"incremental\" in result ||\n                                \"errors\" in result ||\n                                \"payload\" in result) {\n                                if (isApolloPayloadResult(result)) {\n                                    next = {};\n                                    if (\"payload\" in result) {\n                                        if (Object.keys(result).length === 1 && result.payload === null) {\n                                            return [2 /*return*/];\n                                        }\n                                        next = __assign({}, result.payload);\n                                    }\n                                    if (\"errors\" in result) {\n                                        next = __assign(__assign({}, next), { extensions: __assign(__assign({}, (\"extensions\" in next ? next.extensions : null)), (_c = {}, _c[PROTOCOL_ERRORS_SYMBOL] = result.errors, _c)) });\n                                    }\n                                    nextValue(next);\n                                }\n                                else {\n                                    // for the last chunk with only `hasNext: false`\n                                    // we don't need to call observer.next as there is no data/errors\n                                    nextValue(result);\n                                }\n                            }\n                            else if (\n                            // If the chunk contains only a \"hasNext: false\", we can call\n                            // observer.complete() immediately.\n                            Object.keys(result).length === 1 &&\n                                \"hasNext\" in result &&\n                                !result.hasNext) {\n                                return [2 /*return*/];\n                            }\n                        }\n                        bi = buffer.indexOf(boundary);\n                    }\n                    return [3 /*break*/, 1];\n                case 3: return [2 /*return*/];\n            }\n        });\n    });\n}\nexport function parseHeaders(headerText) {\n    var headersInit = {};\n    headerText.split(\"\\n\").forEach(function (line) {\n        var i = line.indexOf(\":\");\n        if (i > -1) {\n            // normalize headers to lowercase\n            var name_1 = line.slice(0, i).trim().toLowerCase();\n            var value = line.slice(i + 1).trim();\n            headersInit[name_1] = value;\n        }\n    });\n    return headersInit;\n}\nexport function parseJsonBody(response, bodyText) {\n    if (response.status >= 300) {\n        // Network error\n        var getResult = function () {\n            try {\n                return JSON.parse(bodyText);\n            }\n            catch (err) {\n                return bodyText;\n            }\n        };\n        throwServerError(response, getResult(), \"Response not successful: Received status code \".concat(response.status));\n    }\n    try {\n        return JSON.parse(bodyText);\n    }\n    catch (err) {\n        var parseError = err;\n        parseError.name = \"ServerParseError\";\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        throw parseError;\n    }\n}\nexport function handleError(err, observer) {\n    // if it is a network error, BUT there is graphql result info fire\n    // the next observer before calling error this gives apollo-client\n    // (and react-apollo) the `graphqlErrors` and `networkErrors` to\n    // pass to UI this should only happen if we *also* have data as\n    // part of the response key per the spec\n    if (err.result && err.result.errors && err.result.data) {\n        // if we don't call next, the UI can only show networkError\n        // because AC didn't get any graphqlErrors this is graphql\n        // execution result info (i.e errors and possibly data) this is\n        // because there is no formal spec how errors should translate to\n        // http status codes. So an auth error (401) could have both data\n        // from a public field, errors from a private field, and a status\n        // of 401\n        // {\n        //  user { // this will have errors\n        //    firstName\n        //  }\n        //  products { // this is public so will have data\n        //    cost\n        //  }\n        // }\n        //\n        // the result of above *could* look like this:\n        // {\n        //   data: { products: [{ cost: \"$10\" }] },\n        //   errors: [{\n        //      message: 'your session has timed out',\n        //      path: []\n        //   }]\n        // }\n        // status code of above would be a 401\n        // in the UI you want to show data where you can, errors as data where you can\n        // and use correct http status codes\n        observer.next(err.result);\n    }\n    observer.error(err);\n}\nexport function parseAndCheckHttpResponse(operations) {\n    return function (response) {\n        return response\n            .text()\n            .then(function (bodyText) { return parseJsonBody(response, bodyText); })\n            .then(function (result) {\n            if (!Array.isArray(result) &&\n                !hasOwnProperty.call(result, \"data\") &&\n                !hasOwnProperty.call(result, \"errors\")) {\n                // Data error\n                throwServerError(response, result, \"Server response was missing for query '\".concat(Array.isArray(operations) ?\n                    operations.map(function (op) { return op.operationName; })\n                    : operations.operationName, \"'.\"));\n            }\n            return result;\n        });\n    };\n}\n//# sourceMappingURL=parseAndCheckHttpResponse.js.map"],"names":[],"mappings":"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","x_google_ignoreList":[0]}