{"version":3,"file":"fragments.mjs","sources":["../../../../../../../../../../../node_modules/@apollo/client/utilities/graphql/fragments.js"],"sourcesContent":["import { __assign, __spreadArray } from \"tslib\";\nimport { invariant, newInvariantError } from \"../globals/index.js\";\nimport { BREAK, visit } from \"graphql\";\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    // Build an array of all our fragment definitions that will be used for\n    // validations. We also do some validations on the other definitions in the\n    // document while building this list.\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        // Throw an error if we encounter an operation definition because we will\n        // define our own operation definition later on.\n        if (definition.kind === \"OperationDefinition\") {\n            throw newInvariantError(\n                85,\n                definition.operation,\n                definition.name ? \" named '\".concat(definition.name.value, \"'\") : \"\"\n            );\n        }\n        // Add our definition to the fragments array if it is a fragment\n        // definition.\n        if (definition.kind === \"FragmentDefinition\") {\n            fragments.push(definition);\n        }\n    });\n    // If the user did not give us a fragment name then let us try to get a\n    // name from a single fragment in the definition.\n    if (typeof actualFragmentName === \"undefined\") {\n        invariant(fragments.length === 1, 86, fragments.length);\n        actualFragmentName = fragments[0].name.value;\n    }\n    // Generate a query document with an operation that simply spreads the\n    // fragment inside of it.\n    var query = __assign(__assign({}, document), { definitions: __spreadArray([\n            {\n                kind: \"OperationDefinition\",\n                // OperationTypeNode is an enum\n                operation: \"query\",\n                selectionSet: {\n                    kind: \"SelectionSet\",\n                    selections: [\n                        {\n                            kind: \"FragmentSpread\",\n                            name: {\n                                kind: \"Name\",\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ], document.definitions, true) });\n    return query;\n}\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n    switch (selection.kind) {\n        case \"InlineFragment\":\n            return selection;\n        case \"FragmentSpread\": {\n            var fragmentName = selection.name.value;\n            if (typeof fragmentMap === \"function\") {\n                return fragmentMap(fragmentName);\n            }\n            var fragment = fragmentMap && fragmentMap[fragmentName];\n            invariant(fragment, 87, fragmentName);\n            return fragment || null;\n        }\n        default:\n            return null;\n    }\n}\nexport function isFullyUnmaskedOperation(document) {\n    var isUnmasked = true;\n    visit(document, {\n        FragmentSpread: function (node) {\n            isUnmasked =\n                !!node.directives &&\n                    node.directives.some(function (directive) { return directive.name.value === \"unmask\"; });\n            if (!isUnmasked) {\n                return BREAK;\n            }\n        },\n    });\n    return isUnmasked;\n}\n//# sourceMappingURL=fragments.js.map"],"names":[],"mappings":";;;;AAyBgB,SAAA,yBAAyB,UAAU,cAAc;AAC7D,MAAI,qBAAqB;AAIzB,MAAI,YAAY,CAAC;AACR,WAAA,YAAY,QAAQ,SAAU,YAAY;AAG3C,QAAA,WAAW,SAAS,uBAAuB;AACrC,YAAA;AAAA,QACF;AAAA,QACA,WAAW;AAAA,QACX,WAAW,OAAO,WAAW,OAAO,WAAW,KAAK,OAAO,GAAG,IAAI;AAAA,MACtE;AAAA,IAAA;AAIA,QAAA,WAAW,SAAS,sBAAsB;AAC1C,gBAAU,KAAK,UAAU;AAAA,IAAA;AAAA,EAC7B,CACH;AAGG,MAAA,OAAO,uBAAuB,aAAa;AAC3C,cAAU,UAAU,WAAW,GAAG,IAAI,UAAU,MAAM;AACjC,yBAAA,UAAU,CAAC,EAAE,KAAK;AAAA,EAAA;AAIvC,MAAA,QAAQ,SAAS,SAAS,CAAA,GAAI,QAAQ,GAAG,EAAE,aAAa,cAAc;AAAA,IAClE;AAAA,MACI,MAAM;AAAA;AAAA,MAEN,WAAW;AAAA,MACX,cAAc;AAAA,QACV,MAAM;AAAA,QACN,YAAY;AAAA,UACR;AAAA,YACI,MAAM;AAAA,YACN,MAAM;AAAA,cACF,MAAM;AAAA,cACN,OAAO;AAAA,YAAA;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EAEL,GAAA,SAAS,aAAa,IAAI,GAAG;AAC7B,SAAA;AACX;AAGO,SAAS,kBAAkB,WAAW;AACzC,MAAI,cAAc,QAAQ;AAAE,gBAAY,CAAC;AAAA,EAAA;AACzC,MAAI,WAAW,CAAC;AACN,YAAA,QAAQ,SAAU,UAAU;AACzB,aAAA,SAAS,KAAK,KAAK,IAAI;AAAA,EAAA,CACnC;AACM,SAAA;AACX;AACgB,SAAA,yBAAyB,WAAW,aAAa;AAC7D,UAAQ,UAAU,MAAM;AAAA,IACpB,KAAK;AACM,aAAA;AAAA,IACX,KAAK,kBAAkB;AACf,UAAA,eAAe,UAAU,KAAK;AAC9B,UAAA,OAAO,gBAAgB,YAAY;AACnC,eAAO,YAAY,YAAY;AAAA,MAAA;AAE/B,UAAA,WAAW,eAAe,YAAY,YAAY;AAC5C,gBAAA,UAAU,IAAI,YAAY;AACpC,aAAO,YAAY;AAAA,IAAA;AAAA,IAEvB;AACW,aAAA;AAAA,EAAA;AAEnB;AACO,SAAS,yBAAyB,UAAU;AAC/C,MAAI,aAAa;AACjB,QAAM,UAAU;AAAA,IACZ,gBAAgB,SAAU,MAAM;AAExB,mBAAA,CAAC,CAAC,KAAK,cACH,KAAK,WAAW,KAAK,SAAU,WAAW;AAAS,eAAA,UAAU,KAAK,UAAU;AAAA,MAAA,CAAW;AAC/F,UAAI,CAAC,YAAY;AACN,eAAA;AAAA,MAAA;AAAA,IACX;AAAA,EACJ,CACH;AACM,SAAA;AACX;","x_google_ignoreList":[0]}