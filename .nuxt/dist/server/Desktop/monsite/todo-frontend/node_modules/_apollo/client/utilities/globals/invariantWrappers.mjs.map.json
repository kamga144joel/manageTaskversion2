{"file":"invariantWrappers.mjs","mappings":";;;;;AAIA,SAAS,KAAK,IAAI;AACd,SAAO,SAAU,SAAS;AACtB,QAAI,OAAO,CAAE;AACb,aAAS,KAAK,GAAG,KAAK,UAAU,QAAQ,MAAM;AAC1C,WAAK,KAAK,CAAC,IAAI,UAAU,EAAE;AAAA,IACvC;AACQ,QAAI,OAAO,YAAY,UAAU;AAC7B,UAAI,OAAO;AACX,gBAAU,mBAAmB,IAAI;AACjC,UAAI,CAAC,SAAS;AACV,kBAAU,oBAAoB,MAAM,IAAI;AACxC,eAAO,CAAE;AAAA,MACzB;AAAA,IACA;AACQ,OAAG,MAAM,QAAQ,CAAC,OAAO,EAAE,OAAO,IAAI,CAAC;AAAA,EAC1C;AACL;AACG,IAAC,YAAY,OAAO,OAAO,SAASA,WAAU,WAAW,SAAS;AACjE,MAAI,OAAO,CAAE;AACb,WAAS,KAAK,GAAG,KAAK,UAAU,QAAQ,MAAM;AAC1C,SAAK,KAAK,CAAC,IAAI,UAAU,EAAE;AAAA,EACnC;AACI,MAAI,CAAC,WAAW;AACZC,gBAAkB,WAAW,mBAAmB,SAAS,IAAI,KAAK,oBAAoB,SAAS,IAAI,CAAC;AAAA,EAC5G;AACA,GAAG;AAAA,EACC,OAAO,KAAKA,YAAkB,KAAK;AAAA,EACnC,KAAK,KAAKA,YAAkB,GAAG;AAAA,EAC/B,MAAM,KAAKA,YAAkB,IAAI;AAAA,EACjC,OAAO,KAAKA,YAAkB,KAAK;AACvC,CAAC;AAWD,SAAS,kBAAkB,SAAS;AAChC,MAAI,iBAAiB,CAAE;AACvB,WAAS,KAAK,GAAG,KAAK,UAAU,QAAQ,MAAM;AAC1C,mBAAe,KAAK,CAAC,IAAI,UAAU,EAAE;AAAA,EAC7C;AACI,SAAO,IAAI,eAAe,mBAAmB,SAAS,cAAc,KAChE,oBAAoB,SAAS,cAAc,CAAC;AACpD;AACG,IAAC,4BAA4B,OAAO,IAAI,+BAA+B,OAAO;AACjF,SAAS,UAAU,KAAK;AACpB,MAAI,OAAO,OAAO,UAAU;AACxB,WAAO;AAAA,EACf;AACI,MAAI;AACA,WAAO,oBAAoB,KAAK,CAAC,EAAE,MAAM,GAAG,GAAI;AAAA,EACxD,SACW,IAAI;AACP,WAAO;AAAA,EACf;AACA;AACA,SAAS,mBAAmB,SAAS,aAAa;AAC9C,MAAI,gBAAgB,QAAQ;AAAE,kBAAc,CAAA;AAAA,EAAG;AAC/C,MAAI,CAAC;AACD;AACJ,SAAQ,OAAO,yBAAyB,KACpC,OAAO,yBAAyB,EAAE,SAAS,YAAY,IAAI,SAAS,CAAC;AAC7E;AACA,SAAS,oBAAoB,SAAS,aAAa;AAC/C,MAAI,gBAAgB,QAAQ;AAAE,kBAAc,CAAA;AAAA,EAAG;AAC/C,MAAI,CAAC;AACD;AACJ,SAAO,+FAA+F,OAAO,mBAAmB,KAAK,UAAU;AAAA,IAC3I;AAAA,IACA;AAAA,IACA,MAAM,YAAY,IAAI,SAAS;AAAA,EAClC,CAAA,CAAC,CAAC;AACP;","names":["invariant","originalInvariant"],"sources":["../../../../../../../../../../../node_modules/@apollo/client/utilities/globals/invariantWrappers.js"],"sourcesContent":["import { invariant as originalInvariant, InvariantError } from \"ts-invariant\";\nimport { version } from \"../../version.js\";\nimport global from \"./global.js\";\nimport { stringifyForDisplay } from \"../common/stringifyForDisplay.js\";\nfunction wrap(fn) {\n    return function (message) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (typeof message === \"number\") {\n            var arg0 = message;\n            message = getHandledErrorMsg(arg0);\n            if (!message) {\n                message = getFallbackErrorMsg(arg0, args);\n                args = [];\n            }\n        }\n        fn.apply(void 0, [message].concat(args));\n    };\n}\nvar invariant = Object.assign(function invariant(condition, message) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    if (!condition) {\n        originalInvariant(condition, getHandledErrorMsg(message, args) || getFallbackErrorMsg(message, args));\n    }\n}, {\n    debug: wrap(originalInvariant.debug),\n    log: wrap(originalInvariant.log),\n    warn: wrap(originalInvariant.warn),\n    error: wrap(originalInvariant.error),\n});\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */\nfunction newInvariantError(message) {\n    var optionalParams = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        optionalParams[_i - 1] = arguments[_i];\n    }\n    return new InvariantError(getHandledErrorMsg(message, optionalParams) ||\n        getFallbackErrorMsg(message, optionalParams));\n}\nvar ApolloErrorMessageHandler = Symbol.for(\"ApolloErrorMessageHandler_\" + version);\nfunction stringify(arg) {\n    if (typeof arg == \"string\") {\n        return arg;\n    }\n    try {\n        return stringifyForDisplay(arg, 2).slice(0, 1000);\n    }\n    catch (_a) {\n        return \"<non-serializable>\";\n    }\n}\nfunction getHandledErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) { messageArgs = []; }\n    if (!message)\n        return;\n    return (global[ApolloErrorMessageHandler] &&\n        global[ApolloErrorMessageHandler](message, messageArgs.map(stringify)));\n}\nfunction getFallbackErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) { messageArgs = []; }\n    if (!message)\n        return;\n    return \"An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#\".concat(encodeURIComponent(JSON.stringify({\n        version: version,\n        message: message,\n        args: messageArgs.map(stringify),\n    })));\n}\nexport { invariant, InvariantError, newInvariantError, ApolloErrorMessageHandler, };\n//# sourceMappingURL=invariantWrappers.js.map"],"version":3}