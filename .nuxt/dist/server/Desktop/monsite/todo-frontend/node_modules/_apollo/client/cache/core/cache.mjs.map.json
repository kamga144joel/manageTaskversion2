{"file":"cache.mjs","mappings":"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","names":["ApolloCache"],"sources":["../../../../../../../../../../../node_modules/@apollo/client/cache/core/cache.js"],"sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport { wrap } from \"optimism\";\nimport { Observable, cacheSizes, getFragmentDefinition, getFragmentQueryDocument, mergeDeepArray, } from \"../../utilities/index.js\";\nimport { WeakCache } from \"@wry/caches\";\nimport { getApolloCacheMemoryInternals } from \"../../utilities/caching/getMemoryInternals.js\";\nimport { equalByQuery } from \"../../core/equalByQuery.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { maskFragment } from \"../../masking/index.js\";\nvar ApolloCache = /** @class */ (function () {\n    function ApolloCache() {\n        this.assumeImmutableResults = false;\n        // Make sure we compute the same (===) fragment query document every\n        // time we receive the same fragment in readFragment.\n        this.getFragmentDoc = wrap(getFragmentQueryDocument, {\n            max: cacheSizes[\"cache.fragmentQueryDocuments\"] ||\n                1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */,\n            cache: WeakCache,\n        });\n    }\n    // Function used to lookup a fragment when a fragment definition is not part\n    // of the GraphQL document. This is useful for caches, such as InMemoryCache,\n    // that register fragments ahead of time so they can be referenced by name.\n    ApolloCache.prototype.lookupFragment = function (fragmentName) {\n        return null;\n    };\n    // Transactional API\n    // The batch method is intended to replace/subsume both performTransaction\n    // and recordOptimisticTransaction, but performTransaction came first, so we\n    // provide a default batch implementation that's just another way of calling\n    // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n    // override the batch method to do more interesting things with its options.\n    ApolloCache.prototype.batch = function (options) {\n        var _this = this;\n        var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic\n            : options.optimistic === false ? null\n                : void 0;\n        var updateResult;\n        this.performTransaction(function () { return (updateResult = options.update(_this)); }, optimisticId);\n        return updateResult;\n    };\n    ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {\n        this.performTransaction(transaction, optimisticId);\n    };\n    // Optional API\n    // Called once per input document, allowing the cache to make static changes\n    // to the query, such as adding __typename fields.\n    ApolloCache.prototype.transformDocument = function (document) {\n        return document;\n    };\n    // Called before each ApolloLink request, allowing the cache to make dynamic\n    // changes to the query, such as filling in missing fragment definitions.\n    ApolloCache.prototype.transformForLink = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.identify = function (object) {\n        return;\n    };\n    ApolloCache.prototype.gc = function () {\n        return [];\n    };\n    ApolloCache.prototype.modify = function (options) {\n        return false;\n    };\n    // DataProxy API\n    ApolloCache.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\n        return this.read(__assign(__assign({}, options), { rootId: options.id || \"ROOT_QUERY\", optimistic: optimistic }));\n    };\n    /** {@inheritDoc @apollo/client!ApolloClient#watchFragment:member(1)} */\n    ApolloCache.prototype.watchFragment = function (options) {\n        var _this = this;\n        var fragment = options.fragment, fragmentName = options.fragmentName, from = options.from, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, otherOptions = __rest(options, [\"fragment\", \"fragmentName\", \"from\", \"optimistic\"]);\n        var query = this.getFragmentDoc(fragment, fragmentName);\n        // While our TypeScript types do not allow for `undefined` as a valid\n        // `from`, its possible `useFragment` gives us an `undefined` since it\n        // calls` cache.identify` and provides that value to `from`. We are\n        // adding this fix here however to ensure those using plain JavaScript\n        // and using `cache.identify` themselves will avoid seeing the obscure\n        // warning.\n        var id = typeof from === \"undefined\" || typeof from === \"string\" ?\n            from\n            : this.identify(from);\n        var dataMasking = !!options[Symbol.for(\"apollo.dataMasking\")];\n        if (globalThis.__DEV__ !== false) {\n            var actualFragmentName = fragmentName || getFragmentDefinition(fragment).name.value;\n            if (!id) {\n                globalThis.__DEV__ !== false && invariant.warn(1, actualFragmentName);\n            }\n        }\n        var diffOptions = __assign(__assign({}, otherOptions), { returnPartialData: true, id: id, query: query, optimistic: optimistic });\n        var latestDiff;\n        return new Observable(function (observer) {\n            return _this.watch(__assign(__assign({}, diffOptions), { immediate: true, callback: function (diff) {\n                    var data = dataMasking ?\n                        maskFragment(diff.result, fragment, _this, fragmentName)\n                        : diff.result;\n                    if (\n                    // Always ensure we deliver the first result\n                    latestDiff &&\n                        equalByQuery(query, { data: latestDiff.result }, { data: data }, \n                        // TODO: Fix the type on WatchFragmentOptions so that TVars\n                        // extends OperationVariables\n                        options.variables)) {\n                        return;\n                    }\n                    var result = {\n                        data: data,\n                        complete: !!diff.complete,\n                    };\n                    if (diff.missing) {\n                        result.missing = mergeDeepArray(diff.missing.map(function (error) { return error.missing; }));\n                    }\n                    latestDiff = __assign(__assign({}, diff), { result: data });\n                    observer.next(result);\n                } }));\n        });\n    };\n    ApolloCache.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\n        return this.read(__assign(__assign({}, options), { query: this.getFragmentDoc(options.fragment, options.fragmentName), rootId: options.id, optimistic: optimistic }));\n    };\n    ApolloCache.prototype.writeQuery = function (_a) {\n        var id = _a.id, data = _a.data, options = __rest(_a, [\"id\", \"data\"]);\n        return this.write(Object.assign(options, {\n            dataId: id || \"ROOT_QUERY\",\n            result: data,\n        }));\n    };\n    ApolloCache.prototype.writeFragment = function (_a) {\n        var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = __rest(_a, [\"id\", \"data\", \"fragment\", \"fragmentName\"]);\n        return this.write(Object.assign(options, {\n            query: this.getFragmentDoc(fragment, fragmentName),\n            dataId: id,\n            result: data,\n        }));\n    };\n    ApolloCache.prototype.updateQuery = function (options, update) {\n        return this.batch({\n            update: function (cache) {\n                var value = cache.readQuery(options);\n                var data = update(value);\n                if (data === void 0 || data === null)\n                    return value;\n                cache.writeQuery(__assign(__assign({}, options), { data: data }));\n                return data;\n            },\n        });\n    };\n    ApolloCache.prototype.updateFragment = function (options, update) {\n        return this.batch({\n            update: function (cache) {\n                var value = cache.readFragment(options);\n                var data = update(value);\n                if (data === void 0 || data === null)\n                    return value;\n                cache.writeFragment(__assign(__assign({}, options), { data: data }));\n                return data;\n            },\n        });\n    };\n    return ApolloCache;\n}());\nexport { ApolloCache };\nif (globalThis.__DEV__ !== false) {\n    ApolloCache.prototype.getMemoryInternals = getApolloCacheMemoryInternals;\n}\n//# sourceMappingURL=cache.js.map"],"version":3}