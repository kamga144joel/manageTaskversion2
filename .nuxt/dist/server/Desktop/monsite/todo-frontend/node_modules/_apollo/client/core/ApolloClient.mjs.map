{"version":3,"file":"ApolloClient.mjs","sources":["../../../../../../../../../../node_modules/@apollo/client/core/ApolloClient.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { invariant, newInvariantError } from \"../utilities/globals/index.js\";\nimport { ApolloLink, execute } from \"../link/core/index.js\";\nimport { version } from \"../version.js\";\nimport { HttpLink } from \"../link/http/index.js\";\nimport { QueryManager } from \"./QueryManager.js\";\nimport { LocalState } from \"./LocalState.js\";\nvar hasSuggestedDevtools = false;\n// Though mergeOptions now resides in @apollo/client/utilities, it was\n// previously declared and exported from this module, and then reexported from\n// @apollo/client/core. Since we need to preserve that API anyway, the easiest\n// solution is to reexport mergeOptions where it was previously declared (here).\nimport { mergeOptions } from \"../utilities/index.js\";\nimport { getApolloClientMemoryInternals } from \"../utilities/caching/getMemoryInternals.js\";\nexport { mergeOptions };\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over an `ApolloLink` instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through `Observable` instances.\n */\nvar ApolloClient = /** @class */ (function () {\n    /**\n     * Constructs an instance of `ApolloClient`.\n     *\n     * @example\n     * ```js\n     * import { ApolloClient, InMemoryCache } from '@apollo/client';\n     *\n     * const cache = new InMemoryCache();\n     *\n     * const client = new ApolloClient({\n     *   // Provide required constructor fields\n     *   cache: cache,\n     *   uri: 'http://localhost:4000/',\n     *\n     *   // Provide some optional constructor fields\n     *   name: 'react-web-client',\n     *   version: '1.3',\n     *   queryDeduplication: false,\n     *   defaultOptions: {\n     *     watchQuery: {\n     *       fetchPolicy: 'cache-and-network',\n     *     },\n     *   },\n     * });\n     * ```\n     */\n    function ApolloClient(options) {\n        var _this = this;\n        var _a;\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        if (!options.cache) {\n            throw newInvariantError(16);\n        }\n        var uri = options.uri, credentials = options.credentials, headers = options.headers, cache = options.cache, documentTransform = options.documentTransform, _b = options.ssrMode, ssrMode = _b === void 0 ? false : _b, _c = options.ssrForceFetchDelay, ssrForceFetchDelay = _c === void 0 ? 0 : _c, \n        // Expose the client instance as window.__APOLLO_CLIENT__ and call\n        // onBroadcast in queryManager.broadcastQueries to enable browser\n        // devtools, but disable them by default in production.\n        connectToDevTools = options.connectToDevTools, _d = options.queryDeduplication, queryDeduplication = _d === void 0 ? true : _d, defaultOptions = options.defaultOptions, defaultContext = options.defaultContext, _e = options.assumeImmutableResults, assumeImmutableResults = _e === void 0 ? cache.assumeImmutableResults : _e, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version, devtools = options.devtools, dataMasking = options.dataMasking;\n        var link = options.link;\n        if (!link) {\n            link =\n                uri ? new HttpLink({ uri: uri, credentials: credentials, headers: headers }) : ApolloLink.empty();\n        }\n        this.link = link;\n        this.cache = cache;\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.defaultOptions = defaultOptions || Object.create(null);\n        this.typeDefs = typeDefs;\n        this.devtoolsConfig = __assign(__assign({}, devtools), { enabled: (_a = devtools === null || devtools === void 0 ? void 0 : devtools.enabled) !== null && _a !== void 0 ? _a : connectToDevTools });\n        if (this.devtoolsConfig.enabled === undefined) {\n            this.devtoolsConfig.enabled = globalThis.__DEV__ !== false;\n        }\n        if (ssrForceFetchDelay) {\n            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.watchFragment = this.watchFragment.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        this.version = version;\n        this.localState = new LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher,\n        });\n        this.queryManager = new QueryManager({\n            cache: this.cache,\n            link: this.link,\n            defaultOptions: this.defaultOptions,\n            defaultContext: defaultContext,\n            documentTransform: documentTransform,\n            queryDeduplication: queryDeduplication,\n            ssrMode: ssrMode,\n            dataMasking: !!dataMasking,\n            clientAwareness: {\n                name: clientAwarenessName,\n                version: clientAwarenessVersion,\n            },\n            localState: this.localState,\n            assumeImmutableResults: assumeImmutableResults,\n            onBroadcast: this.devtoolsConfig.enabled ?\n                function () {\n                    if (_this.devToolsHookCb) {\n                        _this.devToolsHookCb({\n                            action: {},\n                            state: {\n                                queries: _this.queryManager.getQueryStore(),\n                                mutations: _this.queryManager.mutationStore || {},\n                            },\n                            dataWithOptimisticResults: _this.cache.extract(true),\n                        });\n                    }\n                }\n                : void 0,\n        });\n        if (this.devtoolsConfig.enabled)\n            this.connectToDevTools();\n    }\n    ApolloClient.prototype.connectToDevTools = function () {\n        if (typeof window === \"undefined\") {\n            return;\n        }\n        var windowWithDevTools = window;\n        var devtoolsSymbol = Symbol.for(\"apollo.devtools\");\n        (windowWithDevTools[devtoolsSymbol] =\n            windowWithDevTools[devtoolsSymbol] || []).push(this);\n        windowWithDevTools.__APOLLO_CLIENT__ = this;\n        /**\n         * Suggest installing the devtools for developers who don't have them\n         */\n        if (!hasSuggestedDevtools && globalThis.__DEV__ !== false) {\n            hasSuggestedDevtools = true;\n            if (window.document &&\n                window.top === window.self &&\n                /^(https?|file):$/.test(window.location.protocol)) {\n                setTimeout(function () {\n                    if (!window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {\n                        var nav = window.navigator;\n                        var ua = nav && nav.userAgent;\n                        var url = void 0;\n                        if (typeof ua === \"string\") {\n                            if (ua.indexOf(\"Chrome/\") > -1) {\n                                url =\n                                    \"https://chrome.google.com/webstore/detail/\" +\n                                        \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n                            }\n                            else if (ua.indexOf(\"Firefox/\") > -1) {\n                                url =\n                                    \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n                            }\n                        }\n                        if (url) {\n                            globalThis.__DEV__ !== false && invariant.log(\"Download the Apollo DevTools for a better development \" +\n                                \"experience: %s\", url);\n                        }\n                    }\n                }, 10000);\n            }\n        }\n    };\n    Object.defineProperty(ApolloClient.prototype, \"documentTransform\", {\n        /**\n         * The `DocumentTransform` used to modify GraphQL documents before a request\n         * is made. If a custom `DocumentTransform` is not provided, this will be the\n         * default document transform.\n         */\n        get: function () {\n            return this.queryManager.documentTransform;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Call this method to terminate any active client processes, making it safe\n     * to dispose of this `ApolloClient` instance.\n     */\n    ApolloClient.prototype.stop = function () {\n        this.queryManager.stop();\n    };\n    /**\n     * This watches the cache store of the query according to the options specified and\n     * returns an `ObservableQuery`. We can subscribe to this `ObservableQuery` and\n     * receive updated results through an observer when the cache store changes.\n     *\n     * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n     * it uses Apollo's store in order to reactively deliver updates to your query results.\n     *\n     * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n     * first and last name and this person has a particular object identifier, provided by\n     * dataIdFromObject. Later, a different query fetches that same person's\n     * first and last name and the first name has now changed. Then, any observers associated\n     * with the results of the first query will be updated with a new result object.\n     *\n     * Note that if the cache does not change, the subscriber will *not* be notified.\n     *\n     * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n     * a description of store reactivity.\n     */\n    ApolloClient.prototype.watchQuery = function (options) {\n        if (this.defaultOptions.watchQuery) {\n            options = mergeOptions(this.defaultOptions.watchQuery, options);\n        }\n        // XXX Overwriting options is probably not the best way to do this long term...\n        if (this.disableNetworkFetches &&\n            (options.fetchPolicy === \"network-only\" ||\n                options.fetchPolicy === \"cache-and-network\")) {\n            options = __assign(__assign({}, options), { fetchPolicy: \"cache-first\" });\n        }\n        return this.queryManager.watchQuery(options);\n    };\n    /**\n     * This resolves a single query according to the options specified and\n     * returns a `Promise` which is either resolved with the resulting data\n     * or rejected with an error.\n     *\n     * @param options - An object of type `QueryOptions` that allows us to\n     * describe how this query should be treated e.g. whether it should hit the\n     * server at all or just resolve from the cache, etc.\n     */\n    ApolloClient.prototype.query = function (options) {\n        if (this.defaultOptions.query) {\n            options = mergeOptions(this.defaultOptions.query, options);\n        }\n        invariant(options.fetchPolicy !== \"cache-and-network\", 17);\n        if (this.disableNetworkFetches && options.fetchPolicy === \"network-only\") {\n            options = __assign(__assign({}, options), { fetchPolicy: \"cache-first\" });\n        }\n        return this.queryManager.query(options);\n    };\n    /**\n     * This resolves a single mutation according to the options specified and returns a\n     * Promise which is either resolved with the resulting data or rejected with an\n     * error. In some cases both `data` and `errors` might be undefined, for example\n     * when `errorPolicy` is set to `'ignore'`.\n     *\n     * It takes options as an object with the following keys and values:\n     */\n    ApolloClient.prototype.mutate = function (options) {\n        if (this.defaultOptions.mutate) {\n            options = mergeOptions(this.defaultOptions.mutate, options);\n        }\n        return this.queryManager.mutate(options);\n    };\n    /**\n     * This subscribes to a graphql subscription according to the options specified and returns an\n     * `Observable` which either emits received data or an error.\n     */\n    ApolloClient.prototype.subscribe = function (options) {\n        var _this = this;\n        var id = this.queryManager.generateQueryId();\n        return this.queryManager\n            .startGraphQLSubscription(options)\n            .map(function (result) { return (__assign(__assign({}, result), { data: _this.queryManager.maskOperation({\n                document: options.query,\n                data: result.data,\n                fetchPolicy: options.fetchPolicy,\n                id: id,\n            }) })); });\n    };\n    /**\n     * Tries to read some data from the store in the shape of the provided\n     * GraphQL query without making a network request. This method will start at\n     * the root query. To start at a specific id returned by `dataIdFromObject`\n     * use `readFragment`.\n     *\n     * @param optimistic - Set to `true` to allow `readQuery` to return\n     * optimistic results. Is `false` by default.\n     */\n    ApolloClient.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readQuery(options, optimistic);\n    };\n    /**\n     * Watches the cache store of the fragment according to the options specified\n     * and returns an `Observable`. We can subscribe to this\n     * `Observable` and receive updated results through an\n     * observer when the cache store changes.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are reading. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     *\n     * @since 3.10.0\n     * @param options - An object of type `WatchFragmentOptions` that allows\n     * the cache to identify the fragment and optionally specify whether to react\n     * to optimistic updates.\n     */\n    ApolloClient.prototype.watchFragment = function (options) {\n        var _a;\n        return this.cache.watchFragment(__assign(__assign({}, options), (_a = {}, _a[Symbol.for(\"apollo.dataMasking\")] = this.queryManager.dataMasking, _a)));\n    };\n    /**\n     * Tries to read some data from the store in the shape of the provided\n     * GraphQL fragment without making a network request. This method will read a\n     * GraphQL fragment from any arbitrary id that is currently cached, unlike\n     * `readQuery` which will only read from the root query.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are reading. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     *\n     * @param optimistic - Set to `true` to allow `readFragment` to return\n     * optimistic results. Is `false` by default.\n     */\n    ApolloClient.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readFragment(options, optimistic);\n    };\n    /**\n     * Writes some data in the shape of the provided GraphQL query directly to\n     * the store. This method will start at the root query. To start at a\n     * specific id returned by `dataIdFromObject` then use `writeFragment`.\n     */\n    ApolloClient.prototype.writeQuery = function (options) {\n        var ref = this.cache.writeQuery(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    /**\n     * Writes some data in the shape of the provided GraphQL fragment directly to\n     * the store. This method will write to a GraphQL fragment from any arbitrary\n     * id that is currently cached, unlike `writeQuery` which will only write\n     * from the root query.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are writing. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     */\n    ApolloClient.prototype.writeFragment = function (options) {\n        var ref = this.cache.writeFragment(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function (payload) {\n        return execute(this.link, payload);\n    };\n    /**\n     * Resets your entire store by clearing out your cache and then re-executing\n     * all of your active queries. This makes it so that you may guarantee that\n     * there is no data left in your store from a time before you called this\n     * method.\n     *\n     * `resetStore()` is useful when your user just logged out. You’ve removed the\n     * user session, and you now want to make sure that any references to data you\n     * might have fetched while the user session was active is gone.\n     *\n     * It is important to remember that `resetStore()` *will* refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */\n    ApolloClient.prototype.resetStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.queryManager.clearStore({\n                discardWatches: false,\n            });\n        })\n            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () { return _this.reFetchObservableQueries(); });\n    };\n    /**\n     * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n     * not refetch any active queries.\n     */\n    ApolloClient.prototype.clearStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.queryManager.clearStore({\n                discardWatches: true,\n            });\n        })\n            .then(function () { return Promise.all(_this.clearStoreCallbacks.map(function (fn) { return fn(); })); });\n    };\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * reset. `onResetStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */\n    ApolloClient.prototype.onResetStore = function (cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function () {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * cleared. `onClearStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */\n    ApolloClient.prototype.onClearStore = function (cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function () {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    /**\n     * Refetches all of your active queries.\n     *\n     * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n     *\n     * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n     */\n    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n        return this.queryManager.reFetchObservableQueries(includeStandby);\n    };\n    /**\n     * Refetches specified active queries. Similar to \"reFetchObservableQueries()\" but with a specific list of queries.\n     *\n     * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.\n     *\n     * It is important to remember that `refetchQueries()` *will* refetch specified active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */\n    ApolloClient.prototype.refetchQueries = function (options) {\n        var map = this.queryManager.refetchQueries(options);\n        var queries = [];\n        var results = [];\n        map.forEach(function (result, obsQuery) {\n            queries.push(obsQuery);\n            results.push(result);\n        });\n        var result = Promise.all(results);\n        // In case you need the raw results immediately, without awaiting\n        // Promise.all(results):\n        result.queries = queries;\n        result.results = results;\n        // If you decide to ignore the result Promise because you're using\n        // result.queries and result.results instead, you shouldn't have to worry\n        // about preventing uncaught rejections for the Promise.all result.\n        result.catch(function (error) {\n            globalThis.__DEV__ !== false && invariant.debug(18, error);\n        });\n        return result;\n    };\n    /**\n     * Get all currently active `ObservableQuery` objects, in a `Map` keyed by\n     * query ID strings.\n     *\n     * An \"active\" query is one that has observers and a `fetchPolicy` other than\n     * \"standby\" or \"cache-only\".\n     *\n     * You can include all `ObservableQuery` objects (including the inactive ones)\n     * by passing \"all\" instead of \"active\", or you can include just a subset of\n     * active queries by passing an array of query names or DocumentNode objects.\n     */\n    ApolloClient.prototype.getObservableQueries = function (include) {\n        if (include === void 0) { include = \"active\"; }\n        return this.queryManager.getObservableQueries(include);\n    };\n    /**\n     * Exposes the cache's complete state, in a serializable format for later restoration.\n     */\n    ApolloClient.prototype.extract = function (optimistic) {\n        return this.cache.extract(optimistic);\n    };\n    /**\n     * Replaces existing state in the cache (if any) with the values expressed by\n     * `serializedState`.\n     *\n     * Called when hydrating a cache (server side rendering, or offline storage),\n     * and also (potentially) during hot reloads.\n     */\n    ApolloClient.prototype.restore = function (serializedState) {\n        return this.cache.restore(serializedState);\n    };\n    /**\n     * Add additional local resolvers.\n     */\n    ApolloClient.prototype.addResolvers = function (resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    /**\n     * Set (override existing) local resolvers.\n     */\n    ApolloClient.prototype.setResolvers = function (resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    /**\n     * Get all registered local resolvers.\n     */\n    ApolloClient.prototype.getResolvers = function () {\n        return this.localState.getResolvers();\n    };\n    /**\n     * Set a custom local state fragment matcher.\n     */\n    ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    /**\n     * Define a new ApolloLink (or link chain) that Apollo Client will use.\n     */\n    ApolloClient.prototype.setLink = function (newLink) {\n        this.link = this.queryManager.link = newLink;\n    };\n    Object.defineProperty(ApolloClient.prototype, \"defaultContext\", {\n        get: function () {\n            return this.queryManager.defaultContext;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return ApolloClient;\n}());\nexport { ApolloClient };\nif (globalThis.__DEV__ !== false) {\n    ApolloClient.prototype.getMemoryInternals = getApolloClientMemoryInternals;\n}\n//# sourceMappingURL=ApolloClient.js.map"],"names":["ApolloClient","result"],"mappings":"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","x_google_ignoreList":[0]}