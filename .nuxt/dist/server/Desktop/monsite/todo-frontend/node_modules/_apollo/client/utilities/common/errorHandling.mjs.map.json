{"file":"errorHandling.mjs","mappings":";;AAEO,SAAS,sBAAsB,QAAQ;AAC1C,MAAI,SAAS,2BAA2B,MAAM;AAC9C,SAAO,gBAAgB,MAAM;AACjC;AACO,SAAS,2BAA2B,QAAQ;AAC/C,MAAI,gBAAgB,gBAAgB,OAAO,MAAM,IAAI,OAAO,OAAO,MAAM,CAAC,IAAI,CAAE;AAChF,MAAI,kCAAkC,MAAM,KACxC,gBAAgB,OAAO,WAAW,GAAG;AACrC,WAAO,YAAY,QAAQ,SAAU,mBAAmB;AACpD,UAAI,kBAAkB,QAAQ;AAC1B,sBAAc,KAAK,MAAM,eAAe,kBAAkB,MAAM;AAAA,MAChF;AAAA,IACA,CAAS;AAAA,EACT;AACI,SAAO;AACX;","names":[],"sources":["../../../../../../../../../../../node_modules/@apollo/client/utilities/common/errorHandling.js"],"sourcesContent":["import { isNonEmptyArray } from \"./arrays.js\";\nimport { isExecutionPatchIncrementalResult } from \"./incrementalResult.js\";\nexport function graphQLResultHasError(result) {\n    var errors = getGraphQLErrorsFromResult(result);\n    return isNonEmptyArray(errors);\n}\nexport function getGraphQLErrorsFromResult(result) {\n    var graphQLErrors = isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n    if (isExecutionPatchIncrementalResult(result) &&\n        isNonEmptyArray(result.incremental)) {\n        result.incremental.forEach(function (incrementalResult) {\n            if (incrementalResult.errors) {\n                graphQLErrors.push.apply(graphQLErrors, incrementalResult.errors);\n            }\n        });\n    }\n    return graphQLErrors;\n}\n//# sourceMappingURL=errorHandling.js.map"],"version":3}