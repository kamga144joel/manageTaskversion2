{"file":"LocalState.mjs","mappings":"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","names":["LocalState","_a","node"],"sources":["../../../../../../../../../../node_modules/@apollo/client/core/LocalState.js"],"sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { visit, BREAK, isSelectionNode } from \"graphql\";\nimport { argumentsObjectFromField, buildQueryFromSelectionSet, createFragmentMap, getFragmentDefinitions, getMainDefinition, hasDirectives, isField, isInlineFragment, mergeDeep, mergeDeepArray, removeClientSetsFromDocument, resultKeyNameFromField, shouldInclude, } from \"../utilities/index.js\";\nimport { cacheSlot } from \"../cache/index.js\";\nvar LocalState = /** @class */ (function () {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.selectionsToResolveCache = new WeakMap();\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function (resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function (resolverGroup) {\n                _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n            });\n        }\n        else {\n            this.resolvers = mergeDeep(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function (resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function () {\n        return this.resolvers || {};\n    };\n    // Run local client resolvers against the incoming query and remote data.\n    // Locally resolved field values are merged with the incoming remote data,\n    // and returned. Note that locally resolved fields will overwrite\n    // remote data using the same field name.\n    LocalState.prototype.runResolvers = function (_a) {\n        return __awaiter(this, arguments, void 0, function (_b) {\n            var document = _b.document, remoteResult = _b.remoteResult, context = _b.context, variables = _b.variables, _c = _b.onlyRunForcedResolvers, onlyRunForcedResolvers = _c === void 0 ? false : _c;\n            return __generator(this, function (_d) {\n                if (document) {\n                    return [2 /*return*/, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) { return (__assign(__assign({}, remoteResult), { data: localResult.result })); })];\n                }\n                return [2 /*return*/, remoteResult];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function () {\n        return this.fragmentMatcher;\n    };\n    // Client queries contain everything in the incoming document (if a @client\n    // directive is found).\n    LocalState.prototype.clientQuery = function (document) {\n        if (hasDirectives([\"client\"], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n        }\n        return null;\n    };\n    // Server queries are stripped of all @client based selection sets.\n    LocalState.prototype.serverQuery = function (document) {\n        return removeClientSetsFromDocument(document);\n    };\n    LocalState.prototype.prepareContext = function (context) {\n        var cache = this.cache;\n        return __assign(__assign({}, context), { cache: cache, \n            // Getting an entry's cache key is useful for local state resolvers.\n            getCacheKey: function (obj) {\n                return cache.identify(obj);\n            } });\n    };\n    // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n    // @client @export fields locally, then pass the resolved values back to be\n    // used alongside the original operation variables.\n    LocalState.prototype.addExportedVariables = function (document_1) {\n        return __awaiter(this, arguments, void 0, function (document, variables, context) {\n            if (variables === void 0) { variables = {}; }\n            if (context === void 0) { context = {}; }\n            return __generator(this, function (_a) {\n                if (document) {\n                    return [2 /*return*/, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) { return (__assign(__assign({}, variables), data.exportedVariables)); })];\n                }\n                return [2 /*return*/, __assign({}, variables)];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function (document) {\n        var forceResolvers = false;\n        visit(document, {\n            Directive: {\n                enter: function (node) {\n                    if (node.name.value === \"client\" && node.arguments) {\n                        forceResolvers = node.arguments.some(function (arg) {\n                            return arg.name.value === \"always\" &&\n                                arg.value.kind === \"BooleanValue\" &&\n                                arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return BREAK;\n                        }\n                    }\n                },\n            },\n        });\n        return forceResolvers;\n    };\n    // Query the cache and return matching data.\n    LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n        return this.cache.diff({\n            query: buildQueryFromSelectionSet(document),\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function (document_1, rootValue_1) {\n        return __awaiter(this, arguments, void 0, function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n            var mainDefinition, fragments, fragmentMap, selectionsToResolve, definitionOperation, defaultOperationType, _a, cache, client, execContext, isClientFieldDescendant;\n            if (context === void 0) { context = {}; }\n            if (variables === void 0) { variables = {}; }\n            if (fragmentMatcher === void 0) { fragmentMatcher = function () { return true; }; }\n            if (onlyRunForcedResolvers === void 0) { onlyRunForcedResolvers = false; }\n            return __generator(this, function (_b) {\n                mainDefinition = getMainDefinition(document);\n                fragments = getFragmentDefinitions(document);\n                fragmentMap = createFragmentMap(fragments);\n                selectionsToResolve = this.collectSelectionsToResolve(mainDefinition, fragmentMap);\n                definitionOperation = mainDefinition.operation;\n                defaultOperationType = definitionOperation ?\n                    definitionOperation.charAt(0).toUpperCase() +\n                        definitionOperation.slice(1)\n                    : \"Query\";\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: __assign(__assign({}, context), { cache: cache, client: client }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    selectionsToResolve: selectionsToResolve,\n                    onlyRunForcedResolvers: onlyRunForcedResolvers,\n                };\n                isClientFieldDescendant = false;\n                return [2 /*return*/, this.resolveSelectionSet(mainDefinition.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (result) { return ({\n                        result: result,\n                        exportedVariables: execContext.exportedVariables,\n                    }); })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function (selectionSet, isClientFieldDescendant, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return __generator(this, function (_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [rootValue];\n                execute = function (selection) { return __awaiter(_this, void 0, void 0, function () {\n                    var fragment, typeCondition;\n                    return __generator(this, function (_a) {\n                        if (!isClientFieldDescendant &&\n                            !execContext.selectionsToResolve.has(selection)) {\n                            // Skip selections without @client directives\n                            // (still processing if one of the ancestors or one of the child fields has @client directive)\n                            return [2 /*return*/];\n                        }\n                        if (!shouldInclude(selection, variables)) {\n                            // Skip this entirely.\n                            return [2 /*return*/];\n                        }\n                        if (isField(selection)) {\n                            return [2 /*return*/, this.resolveField(selection, isClientFieldDescendant, rootValue, execContext).then(function (fieldResult) {\n                                    var _a;\n                                    if (typeof fieldResult !== \"undefined\") {\n                                        resultsToMerge.push((_a = {},\n                                            _a[resultKeyNameFromField(selection)] = fieldResult,\n                                            _a));\n                                    }\n                                })];\n                        }\n                        if (isInlineFragment(selection)) {\n                            fragment = selection;\n                        }\n                        else {\n                            // This is a named fragment.\n                            fragment = fragmentMap[selection.name.value];\n                            invariant(fragment, 19, selection.name.value);\n                        }\n                        if (fragment && fragment.typeCondition) {\n                            typeCondition = fragment.typeCondition.name.value;\n                            if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                return [2 /*return*/, this.resolveSelectionSet(fragment.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (fragmentResult) {\n                                        resultsToMerge.push(fragmentResult);\n                                    })];\n                            }\n                        }\n                        return [2 /*return*/];\n                    });\n                }); };\n                return [2 /*return*/, Promise.all(selectionSet.selections.map(execute)).then(function () {\n                        return mergeDeepArray(resultsToMerge);\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function (field, isClientFieldDescendant, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (!rootValue) {\n                    return [2 /*return*/, null];\n                }\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = resultKeyNameFromField(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                // Usually all local resolvers are run when passing through here, but\n                // if we've specifically identified that we only want to run forced\n                // resolvers (that is, resolvers for fields marked with\n                // `@client(always: true)`), then we'll skip running non-forced resolvers.\n                if (!execContext.onlyRunForcedResolvers ||\n                    this.shouldForceResolvers(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(\n                            // In case the resolve function accesses reactive variables,\n                            // set cacheSlot to the current cache instance.\n                            cacheSlot.withValue(this.cache, resolve, [\n                                rootValue,\n                                argumentsObjectFromField(field, variables),\n                                execContext.context,\n                                { field: field, fragmentMap: execContext.fragmentMap },\n                            ]));\n                        }\n                    }\n                }\n                return [2 /*return*/, resultPromise.then(function (result) {\n                        var _a, _b;\n                        if (result === void 0) { result = defaultResult; }\n                        // If an @export directive is associated with the current field, store\n                        // the `as` export variable name and current result for later use.\n                        if (field.directives) {\n                            field.directives.forEach(function (directive) {\n                                if (directive.name.value === \"export\" && directive.arguments) {\n                                    directive.arguments.forEach(function (arg) {\n                                        if (arg.name.value === \"as\" && arg.value.kind === \"StringValue\") {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        // Handle all scalar types here.\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        // From here down, the field has a selection set, which means it's trying\n                        // to query a GraphQLObjectType.\n                        if (result == null) {\n                            // Basically any field in a GraphQL response can be null, or missing\n                            return result;\n                        }\n                        var isClientField = (_b = (_a = field.directives) === null || _a === void 0 ? void 0 : _a.some(function (d) { return d.name.value === \"client\"; })) !== null && _b !== void 0 ? _b : false;\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                        // Returned value is an object, and the query has a sub-selection. Recurse.\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function (field, isClientFieldDescendant, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            // This is a nested array, recurse.\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, isClientFieldDescendant, item, execContext);\n            }\n            // This is an object, run the selection set on it.\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant, item, execContext);\n            }\n        }));\n    };\n    // Collect selection nodes on paths from document root down to all @client directives.\n    // This function takes into account transitive fragment spreads.\n    // Complexity equals to a single `visit` over the full document.\n    LocalState.prototype.collectSelectionsToResolve = function (mainDefinition, fragmentMap) {\n        var isSingleASTNode = function (node) { return !Array.isArray(node); };\n        var selectionsToResolveCache = this.selectionsToResolveCache;\n        function collectByDefinition(definitionNode) {\n            if (!selectionsToResolveCache.has(definitionNode)) {\n                var matches_1 = new Set();\n                selectionsToResolveCache.set(definitionNode, matches_1);\n                visit(definitionNode, {\n                    Directive: function (node, _, __, ___, ancestors) {\n                        if (node.name.value === \"client\") {\n                            ancestors.forEach(function (node) {\n                                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                        }\n                    },\n                    FragmentSpread: function (spread, _, __, ___, ancestors) {\n                        var fragment = fragmentMap[spread.name.value];\n                        invariant(fragment, 20, spread.name.value);\n                        var fragmentSelections = collectByDefinition(fragment);\n                        if (fragmentSelections.size > 0) {\n                            // Fragment for this spread contains @client directive (either directly or transitively)\n                            // Collect selection nodes on paths from the root down to fields with the @client directive\n                            ancestors.forEach(function (node) {\n                                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                            matches_1.add(spread);\n                            fragmentSelections.forEach(function (selection) {\n                                matches_1.add(selection);\n                            });\n                        }\n                    },\n                });\n            }\n            return selectionsToResolveCache.get(definitionNode);\n        }\n        return collectByDefinition(mainDefinition);\n    };\n    return LocalState;\n}());\nexport { LocalState };\n//# sourceMappingURL=LocalState.js.map"],"version":3}