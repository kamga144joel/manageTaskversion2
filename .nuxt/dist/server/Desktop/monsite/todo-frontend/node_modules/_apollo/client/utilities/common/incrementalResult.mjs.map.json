{"file":"incrementalResult.mjs","mappings":";;;AAGO,SAAS,kCAAkC,OAAO;AACrD,SAAO,iBAAiB;AAC5B;AACO,SAAS,8BAA8B,OAAO;AACjD,SAAO,aAAa,SAAS,UAAU;AAC3C;AACO,SAAS,uBAAuB,OAAO;AAC1C,SAAQ,kCAAkC,KAAK,KAC3C,8BAA8B,KAAK;AAC3C;AAIO,SAAS,sBAAsB,OAAO;AACzC,SAAO,gBAAgB,KAAK,KAAK,aAAa;AAClD;AACO,SAAS,qBAAqB,YAAY,QAAQ;AACrD,MAAI,aAAa;AACjB,MAAI,SAAS,IAAI,WAAY;AAC7B,MAAI,kCAAkC,MAAM,KACxC,gBAAgB,OAAO,WAAW,GAAG;AACrC,WAAO,YAAY,QAAQ,SAAU,IAAI;AACrC,UAAI,OAAO,GAAG,MAAM,OAAO,GAAG;AAC9B,eAAS,IAAI,KAAK,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AACvC,YAAI,MAAM,KAAK,CAAC;AAChB,YAAI,eAAe,CAAC,MAAM,CAAC,GAAG;AAC9B,YAAI,WAAW,eAAe,CAAA,IAAK,CAAE;AACrC,iBAAS,GAAG,IAAI;AAChB,eAAO;AAAA,MACvB;AACY,mBAAa,OAAO,MAAM,YAAY,IAAI;AAAA,IACtD,CAAS;AAAA,EACT;AACI,SAAO;AACX;","names":[],"sources":["../../../../../../../../../../../node_modules/@apollo/client/utilities/common/incrementalResult.js"],"sourcesContent":["import { isNonNullObject } from \"./objects.js\";\nimport { isNonEmptyArray } from \"./arrays.js\";\nimport { DeepMerger } from \"./mergeDeep.js\";\nexport function isExecutionPatchIncrementalResult(value) {\n    return \"incremental\" in value;\n}\nexport function isExecutionPatchInitialResult(value) {\n    return \"hasNext\" in value && \"data\" in value;\n}\nexport function isExecutionPatchResult(value) {\n    return (isExecutionPatchIncrementalResult(value) ||\n        isExecutionPatchInitialResult(value));\n}\n// This function detects an Apollo payload result before it is transformed\n// into a FetchResult via HttpLink; it cannot detect an ApolloPayloadResult\n// once it leaves the link chain.\nexport function isApolloPayloadResult(value) {\n    return isNonNullObject(value) && \"payload\" in value;\n}\nexport function mergeIncrementalData(prevResult, result) {\n    var mergedData = prevResult;\n    var merger = new DeepMerger();\n    if (isExecutionPatchIncrementalResult(result) &&\n        isNonEmptyArray(result.incremental)) {\n        result.incremental.forEach(function (_a) {\n            var data = _a.data, path = _a.path;\n            for (var i = path.length - 1; i >= 0; --i) {\n                var key = path[i];\n                var isNumericKey = !isNaN(+key);\n                var parent_1 = isNumericKey ? [] : {};\n                parent_1[key] = data;\n                data = parent_1;\n            }\n            mergedData = merger.merge(mergedData, data);\n        });\n    }\n    return mergedData;\n}\n//# sourceMappingURL=incrementalResult.js.map"],"version":3}