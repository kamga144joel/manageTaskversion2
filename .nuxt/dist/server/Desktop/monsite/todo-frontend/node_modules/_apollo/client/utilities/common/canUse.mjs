import "../globals/invariantWrappers.mjs";
import { maybe } from "../globals/maybe.mjs";
import "../globals/global.mjs";
var isReactNative = maybe(function() {
  return (void 0).product;
}) == "ReactNative";
var canUseWeakMap = typeof WeakMap === "function" && !(isReactNative && !global.HermesInternal);
var canUseWeakSet = typeof WeakSet === "function";
var canUseSymbol = typeof Symbol === "function" && typeof Symbol.for === "function";
var canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;
typeof maybe(function() {
  return (void 0).document.createElement;
}) === "function";
// Following advice found in this comment from @domenic (maintainer of jsdom):
// https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327
//
// Since we control the version of Jest and jsdom used when running Apollo
// Client tests, and that version is recent enought to include " jsdom/x.y.z"
// at the end of the user agent string, I believe this case is all we need to
// check. Testing for "Node.js" was recommended for backwards compatibility
// with older version of jsdom, but we don't have that problem.
maybe(function() {
  return (void 0).userAgent.indexOf("jsdom") >= 0;
}) || false;
export {
  canUseAsyncIteratorSymbol,
  canUseSymbol,
  canUseWeakMap,
  canUseWeakSet
};
//# sourceMappingURL=canUse.mjs.map
