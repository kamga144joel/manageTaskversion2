import { onError } from "../../../../_apollo/client/link/error/index.mjs";
import { createApolloProvider } from "@vue/apollo-option";
import { ApolloClients, provideApolloClients } from "../../../../_vue/apollo-composable/dist/index.mjs";
import { setContext } from "../../../../_apollo/client/link/context/index.mjs";
import { useApollo } from "./composables.mjs";
import { NuxtApollo } from "../../../../../../../../_virtual/virtual_nuxt_C__Users_bomberkiller_Desktop_monsite_todo-frontend_.nuxt_apollo.mjs";
import { ref } from "vue";
import "C:/Users/bomberkiller/Desktop/monsite/todo-frontend/node_modules/klona/dist/index.mjs";
import { defineNuxtPlugin } from "../../../../nuxt/dist/app/nuxt.mjs";
import { useRequestHeaders } from "../../../../nuxt/dist/app/composables/ssr.mjs";
import { createHttpLink } from "../../../../_apollo/client/link/http/createHttpLink.mjs";
import { ApolloLink } from "../../../../_apollo/client/link/core/ApolloLink.mjs";
import { InMemoryCache } from "../../../../_apollo/client/cache/inmemory/inMemoryCache.mjs";
import { ApolloClient } from "../../../../_apollo/client/core/ApolloClient.mjs";
const plugin_LXf2PKYaiBa8A1rT1EewHkpMgd7L_xLTLACU1dferBM = defineNuxtPlugin((nuxtApp) => {
  var _a, _b, _c;
  const requestCookies = useRequestHeaders(["cookie"]) || void 0;
  const clients = {};
  for (const [key, clientConfig] of Object.entries(NuxtApollo.clients)) {
    const getAuth = async () => {
      var _a2, _b2, _c2, _d;
      const token = ref(null);
      await nuxtApp.callHook("apollo:auth", { token, client: key });
      if (!token.value) {
        if (clientConfig.tokenStorage === "cookie") {
          if (requestCookies == null ? void 0 : requestCookies.cookie) {
            const t = (_b2 = (_a2 = requestCookies.cookie.split(";").find((c) => c.trim().startsWith(`${clientConfig.tokenName}=`))) == null ? void 0 : _a2.split("=")) == null ? void 0 : _b2[1];
            if (t) {
              token.value = t;
            }
          }
        }
        if (!token.value) {
          return;
        }
      }
      const authScheme = !!((_d = (_c2 = token.value) == null ? void 0 : _c2.match(/^[a-zA-Z]+\s/)) == null ? void 0 : _d[0]);
      if (authScheme || (clientConfig == null ? void 0 : clientConfig.authType) === null) {
        return token.value;
      }
      return `${clientConfig == null ? void 0 : clientConfig.authType} ${token.value}`;
    };
    const authLink = setContext(async (_, { headers }) => {
      const auth = await getAuth();
      if (!auth) {
        return;
      }
      return {
        headers: {
          ...headers,
          ...requestCookies && requestCookies,
          [clientConfig.authHeader]: auth
        }
      };
    });
    const httpLink = authLink.concat(createHttpLink({
      ...(clientConfig == null ? void 0 : clientConfig.httpLinkOptions) && clientConfig.httpLinkOptions,
      uri: clientConfig.httpEndpoint,
      headers: { ...((_a = clientConfig == null ? void 0 : clientConfig.httpLinkOptions) == null ? void 0 : _a.headers) || {} }
    }));
    const errorLink = onError((err) => {
      nuxtApp.callHook("apollo:error", err);
    });
    const link = ApolloLink.from([
      errorLink,
      ...[httpLink]
    ]);
    const cache = new InMemoryCache(clientConfig.inMemoryCacheOptions);
    clients[key] = new ApolloClient({
      link,
      cache,
      ...NuxtApollo.clientAwareness,
      ...{ ssrMode: true },
      connectToDevTools: clientConfig.connectToDevTools || false,
      defaultOptions: clientConfig == null ? void 0 : clientConfig.defaultOptions
    });
    if (!(clients == null ? void 0 : clients.default) && !((_c = (_b = NuxtApollo) == null ? void 0 : _b.clients) == null ? void 0 : _c.default) && key === Object.keys(NuxtApollo.clients)[0]) {
      clients.default = clients[key];
    }
    const cacheKey = `_apollo:${key}`;
    nuxtApp.hook("app:rendered", () => {
      nuxtApp.payload.data[cacheKey] = cache.extract();
    });
  }
  provideApolloClients(clients);
  nuxtApp.vueApp.provide(ApolloClients, clients);
  nuxtApp.vueApp.use(createApolloProvider({ defaultClient: clients == null ? void 0 : clients.default }));
  nuxtApp._apolloClients = clients;
  const defaultClient = clients == null ? void 0 : clients.default;
  return {
    provide: {
      apolloHelpers: useApollo(),
      apollo: { clients, defaultClient }
    }
  };
});
export {
  plugin_LXf2PKYaiBa8A1rT1EewHkpMgd7L_xLTLACU1dferBM as default
};
//# sourceMappingURL=plugin.mjs.map
