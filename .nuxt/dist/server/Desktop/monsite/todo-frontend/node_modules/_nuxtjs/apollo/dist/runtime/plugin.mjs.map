{"version":3,"file":"plugin.mjs","sources":["../../../../../../../../../../../node_modules/@nuxtjs/apollo/dist/runtime/plugin.mjs"],"sourcesContent":["import { destr } from \"destr\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { createApolloProvider } from \"@vue/apollo-option\";\nimport { ApolloClients, provideApolloClients } from \"@vue/apollo-composable\";\nimport { ApolloClient, ApolloLink, createHttpLink, InMemoryCache, split } from \"@apollo/client/core\";\nimport { GraphQLWsLink } from \"@apollo/client/link/subscriptions\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport createRestartableClient from \"./ws.mjs\";\nimport { useApollo } from \"./composables.mjs\";\nimport { ref, useCookie, defineNuxtPlugin, useRequestHeaders } from \"#imports\";\nimport { NuxtApollo } from \"#apollo\";\nexport default defineNuxtPlugin((nuxtApp) => {\n  const requestCookies = process.server && NuxtApollo.proxyCookies && useRequestHeaders([\"cookie\"]) || void 0;\n  const clients = {};\n  for (const [key, clientConfig] of Object.entries(NuxtApollo.clients)) {\n    const getAuth = async () => {\n      const token = ref(null);\n      await nuxtApp.callHook(\"apollo:auth\", { token, client: key });\n      if (!token.value) {\n        if (clientConfig.tokenStorage === \"cookie\") {\n          if (process.client) {\n            const t = useCookie(clientConfig.tokenName).value;\n            if (t) {\n              token.value = t;\n            }\n          } else if (requestCookies?.cookie) {\n            const t = requestCookies.cookie.split(\";\").find((c) => c.trim().startsWith(`${clientConfig.tokenName}=`))?.split(\"=\")?.[1];\n            if (t) {\n              token.value = t;\n            }\n          }\n        } else if (process.client && clientConfig.tokenStorage === \"localStorage\") {\n          token.value = localStorage.getItem(clientConfig.tokenName);\n        }\n        if (!token.value) {\n          return;\n        }\n      }\n      const authScheme = !!token.value?.match(/^[a-zA-Z]+\\s/)?.[0];\n      if (authScheme || clientConfig?.authType === null) {\n        return token.value;\n      }\n      return `${clientConfig?.authType} ${token.value}`;\n    };\n    const authLink = setContext(async (_, { headers }) => {\n      const auth = await getAuth();\n      if (!auth) {\n        return;\n      }\n      return {\n        headers: {\n          ...headers,\n          ...requestCookies && requestCookies,\n          [clientConfig.authHeader]: auth\n        }\n      };\n    });\n    const httpLink = authLink.concat(createHttpLink({\n      ...clientConfig?.httpLinkOptions && clientConfig.httpLinkOptions,\n      uri: process.client && clientConfig.browserHttpEndpoint || clientConfig.httpEndpoint,\n      headers: { ...clientConfig?.httpLinkOptions?.headers || {} }\n    }));\n    let wsLink = null;\n    if (process.client && clientConfig.wsEndpoint) {\n      const wsClient = createRestartableClient({\n        ...clientConfig.wsLinkOptions,\n        url: clientConfig.wsEndpoint,\n        connectionParams: async () => {\n          const auth = await getAuth();\n          if (!auth) {\n            return;\n          }\n          return { headers: { [clientConfig.authHeader]: auth } };\n        }\n      });\n      wsLink = new GraphQLWsLink(wsClient);\n      nuxtApp._apolloWsClients = nuxtApp._apolloWsClients || {};\n      nuxtApp._apolloWsClients[key] = wsClient;\n    }\n    const errorLink = onError((err) => {\n      nuxtApp.callHook(\"apollo:error\", err);\n    });\n    const link = ApolloLink.from([\n      errorLink,\n      ...!wsLink ? [httpLink] : [\n        ...clientConfig?.websocketsOnly ? [wsLink] : [\n          split(\n            ({ query }) => {\n              const definition = getMainDefinition(query);\n              return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n            },\n            wsLink,\n            httpLink\n          )\n        ]\n      ]\n    ]);\n    const cache = new InMemoryCache(clientConfig.inMemoryCacheOptions);\n    clients[key] = new ApolloClient({\n      link,\n      cache,\n      ...NuxtApollo.clientAwareness && { name: key },\n      ...process.server ? { ssrMode: true } : { ssrForceFetchDelay: 100 },\n      connectToDevTools: clientConfig.connectToDevTools || false,\n      defaultOptions: clientConfig?.defaultOptions\n    });\n    if (!clients?.default && !NuxtApollo?.clients?.default && key === Object.keys(NuxtApollo.clients)[0]) {\n      clients.default = clients[key];\n    }\n    const cacheKey = `_apollo:${key}`;\n    nuxtApp.hook(\"app:rendered\", () => {\n      nuxtApp.payload.data[cacheKey] = cache.extract();\n    });\n    if (process.client && nuxtApp.payload.data[cacheKey]) {\n      cache.restore(destr(JSON.stringify(nuxtApp.payload.data[cacheKey])));\n    }\n  }\n  provideApolloClients(clients);\n  nuxtApp.vueApp.provide(ApolloClients, clients);\n  nuxtApp.vueApp.use(createApolloProvider({ defaultClient: clients?.default }));\n  nuxtApp._apolloClients = clients;\n  const defaultClient = clients?.default;\n  return {\n    provide: {\n      apolloHelpers: useApollo(),\n      apollo: { clients, defaultClient }\n    }\n  };\n});\n"],"names":["_b","_a","_c"],"mappings":"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","x_google_ignoreList":[0]}