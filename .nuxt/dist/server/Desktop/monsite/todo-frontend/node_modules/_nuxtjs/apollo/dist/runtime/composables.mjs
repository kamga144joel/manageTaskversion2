import { NuxtApollo } from "../../../../../../../../_virtual/virtual_nuxt_C__Users_bomberkiller_Desktop_monsite_todo-frontend_.nuxt_apollo.mjs";
import { ref } from "vue";
import { useCookie } from "../../../../nuxt/dist/app/composables/cookie.mjs";
import { useNuxtApp } from "../../../../nuxt/dist/app/nuxt.mjs";
function useApollo() {
  const nuxtApp = useNuxtApp();
  const getToken = async (client) => {
    var _a, _b;
    client = client || "default";
    const conf = (_b = (_a = NuxtApollo) == null ? void 0 : _a.clients) == null ? void 0 : _b[client];
    if (!conf) {
      return;
    }
    const token = ref(null);
    await nuxtApp.callHook("apollo:auth", { token, client });
    if (token.value) {
      return token.value;
    }
    const tokenName = conf.tokenName;
    return (conf == null ? void 0 : conf.tokenStorage) === "cookie" ? nuxtApp.runWithContext(() => useCookie(tokenName).value) : null;
  };
  const updateAuth = async ({ token, client, mode, skipResetStore }) => {
    var _a, _b, _c, _d, _e;
    client = client || "default";
    const conf = (_b = (_a = NuxtApollo) == null ? void 0 : _a.clients) == null ? void 0 : _b[client];
    if (!conf) {
      return;
    }
    const tokenName = client && conf.tokenName;
    if ((conf == null ? void 0 : conf.tokenStorage) === "cookie") {
      const cookieOpts = client && (conf == null ? void 0 : conf.cookieAttributes) || ((_c = NuxtApollo) == null ? void 0 : _c.cookieAttributes);
      const cookie = useCookie(tokenName, cookieOpts);
      if (!cookie.value && mode === "logout") {
        return;
      }
      cookie.value = mode === "login" && token || null;
    }
    if ((_d = nuxtApp == null ? void 0 : nuxtApp._apolloWsClients) == null ? void 0 : _d[client]) {
      nuxtApp._apolloWsClients[client].restart();
    }
    if (skipResetStore) {
      return;
    }
    await ((_e = nuxtApp == null ? void 0 : nuxtApp._apolloClients) == null ? void 0 : _e[client].resetStore().catch((e) => console.log("%cError on cache reset", "color: orange;", e.message)));
  };
  return {
    getToken,
    clients: nuxtApp == null ? void 0 : nuxtApp._apolloClients,
    onLogin: (token, client, skipResetStore) => updateAuth({ token, client, skipResetStore, mode: "login" }),
    onLogout: (client, skipResetStore) => updateAuth({ client, skipResetStore, mode: "logout" })
  };
}
export {
  useApollo
};
//# sourceMappingURL=composables.mjs.map
