{"file":"composables.mjs","mappings":";;;;AA6DO,SAAS,YAAY;AAC1B,QAAM,UAAU,WAAW;AACrB,QAAA,WAAW,OAAO,WAAW;;AACjC,aAAS,UAAU;AACb,UAAA,QAAO,6CAAY,YAAZ,mBAAsB;AACnC,QAAI,CAAC,MAAM;AACT;AAAA,IAAA;AAEI,UAAA,QAAQ,IAAI,IAAI;AACtB,UAAM,QAAQ,SAAS,eAAe,EAAE,OAAO,QAAQ;AACvD,QAAI,MAAM,OAAO;AACf,aAAO,MAAM;AAAA,IAAA;AAEf,UAAM,YAAY,KAAK;AAChB,YAAA,6BAAM,kBAAiB,WAAW,QAAQ,eAAe,MAAM,UAAU,SAAS,EAAE,KAAK,IAAyD;AAAA,EAC3J;AACA,QAAM,aAAa,OAAO,EAAE,OAAO,QAAQ,MAAM,qBAAqB;;AACpE,aAAS,UAAU;AACb,UAAA,QAAO,6CAAY,YAAZ,mBAAsB;AACnC,QAAI,CAAC,MAAM;AACT;AAAA,IAAA;AAEI,UAAA,YAAY,UAAU,KAAK;AAC7B,SAAA,6BAAM,kBAAiB,UAAU;AACnC,YAAM,aAAa,WAAU,6BAAM,uBAAoB,uCAAY;AAC7D,YAAA,SAAS,UAAU,WAAW,UAAU;AAC9C,UAAI,CAAC,OAAO,SAAS,SAAS,UAAU;AACtC;AAAA,MAAA;AAEK,aAAA,QAAQ,SAAS,WAAW,SAAS;AAAA,IAAA;AAQ1C,SAAA,wCAAS,qBAAT,mBAA4B,SAAS;AAC/B,cAAA,iBAAiB,MAAM,EAAE,QAAQ;AAAA,IAAA;AAE3C,QAAI,gBAAgB;AAClB;AAAA,IAAA;AAEF,YAAM,wCAAS,mBAAT,mBAA0B,QAAQ,aAAa,MAAM,CAAC,MAAM,QAAQ,IAAI,0BAA0B,kBAAkB,EAAE,OAAO;AAAA,EACrI;AACO,SAAA;AAAA,IACL;AAAA,IACA,SAAS,mCAAS;AAAA,IAClB,SAAS,CAAC,OAAO,QAAQ,mBAAmB,WAAW,EAAE,OAAO,QAAQ,gBAAgB,MAAM,QAAA,CAAS;AAAA,IACvG,UAAU,CAAC,QAAQ,mBAAmB,WAAW,EAAE,QAAQ,gBAAgB,MAAM,SAAU,CAAA;AAAA,EAC7F;AACF;","names":[],"sources":["../../../../../../../../../../../node_modules/@nuxtjs/apollo/dist/runtime/composables.mjs"],"sourcesContent":["import { hash } from \"ohash\";\nimport { print } from \"graphql\";\nimport { ref, unref, isRef, reactive, useCookie, useNuxtApp, useAsyncData } from \"#imports\";\nimport { NuxtApollo } from \"#apollo\";\nexport function useAsyncQuery(...args) {\n  const { key, fn, options } = prep(...args);\n  return useAsyncData(key, fn, options);\n}\nexport function useLazyAsyncQuery(...args) {\n  const { key, fn, options } = prep(...args);\n  return useAsyncData(key, fn, { ...options, lazy: true });\n}\nconst prep = (...args) => {\n  const { clients } = useApollo();\n  let query;\n  let variables;\n  let cache;\n  let clientId;\n  let context;\n  let options = {};\n  if (typeof args?.[0] === \"object\" && \"query\" in args[0]) {\n    query = args?.[0]?.query;\n    variables = args?.[0]?.variables;\n    cache = args?.[0]?.cache;\n    context = args?.[0]?.context;\n    clientId = args?.[0]?.clientId;\n    if (typeof args?.[1] === \"object\") {\n      options = args?.[1];\n    }\n  } else {\n    query = args?.[0];\n    variables = args?.[1];\n    clientId = args?.[2];\n    context = args?.[3];\n    if (typeof args?.[4] === \"object\") {\n      options = args?.[4];\n    }\n  }\n  if (!query) {\n    throw new Error(\"@nuxtjs/apollo: no query provided\");\n  }\n  if (!clientId || !clients?.[clientId]) {\n    clientId = clients?.default ? \"default\" : Object.keys(clients)?.[0];\n    if (!clientId) {\n      throw new Error(\"@nuxtjs/apollo: no client found\");\n    }\n  }\n  if (variables) {\n    variables = isRef(variables) ? variables : reactive(variables);\n    options.watch = options.watch || [];\n    options.watch.push(variables);\n  }\n  const key = args?.[0]?.key || hash({ query: print(query), variables: unref(variables), clientId });\n  const fn = () => clients[clientId]?.query({\n    query,\n    variables: unref(variables) || void 0,\n    ...cache && { fetchPolicy: \"cache-first\" },\n    context\n  }).then((r) => r.data);\n  return { key, query, clientId, variables, fn, options };\n};\nexport function useApollo() {\n  const nuxtApp = useNuxtApp();\n  const getToken = async (client) => {\n    client = client || \"default\";\n    const conf = NuxtApollo?.clients?.[client];\n    if (!conf) {\n      return;\n    }\n    const token = ref(null);\n    await nuxtApp.callHook(\"apollo:auth\", { token, client });\n    if (token.value) {\n      return token.value;\n    }\n    const tokenName = conf.tokenName;\n    return conf?.tokenStorage === \"cookie\" ? nuxtApp.runWithContext(() => useCookie(tokenName).value) : process.client && localStorage.getItem(tokenName) || null;\n  };\n  const updateAuth = async ({ token, client, mode, skipResetStore }) => {\n    client = client || \"default\";\n    const conf = NuxtApollo?.clients?.[client];\n    if (!conf) {\n      return;\n    }\n    const tokenName = client && conf.tokenName;\n    if (conf?.tokenStorage === \"cookie\") {\n      const cookieOpts = client && conf?.cookieAttributes || NuxtApollo?.cookieAttributes;\n      const cookie = useCookie(tokenName, cookieOpts);\n      if (!cookie.value && mode === \"logout\") {\n        return;\n      }\n      cookie.value = mode === \"login\" && token || null;\n    } else if (process.client && conf?.tokenStorage === \"localStorage\") {\n      if (mode === \"login\" && token) {\n        localStorage.setItem(tokenName, token);\n      } else if (mode === \"logout\") {\n        localStorage.removeItem(tokenName);\n      }\n    }\n    if (nuxtApp?._apolloWsClients?.[client]) {\n      nuxtApp._apolloWsClients[client].restart();\n    }\n    if (skipResetStore) {\n      return;\n    }\n    await nuxtApp?._apolloClients?.[client].resetStore().catch((e) => console.log(\"%cError on cache reset\", \"color: orange;\", e.message));\n  };\n  return {\n    getToken,\n    clients: nuxtApp?._apolloClients,\n    onLogin: (token, client, skipResetStore) => updateAuth({ token, client, skipResetStore, mode: \"login\" }),\n    onLogout: (client, skipResetStore) => updateAuth({ client, skipResetStore, mode: \"logout\" })\n  };\n}\n"],"version":3}