{"version":3,"file":"Inscription-hAdhYfRk.js","sources":["../../../../pages/Inscription.vue"],"sourcesContent":["<template>\r\n  <div class=\"min-h-screen flex items-center justify-center dark:bg-gray-900 bg-gray-100\">\r\n    <div class=\"bg-white dark:bg-gray-800 text-black dark:text-white shadow-lg rounded-lg p-8 w-full max-w-md\">\r\n      <h1 class=\"text-2xl font-bold text-center mb-6 text-indigo-600 dark:text-indigo-400\">\r\n        Créer un compte\r\n      </h1>\r\n\r\n      <form @submit.prevent=\"handleRegister\" class=\"space-y-4\">\r\n        <div>\r\n          <label for=\"name\" class=\"block text-gray-700 dark:text-gray-300 mb-1\">Nom complet</label>\r\n          <input\r\n            v-model=\"name\"\r\n            type=\"text\"\r\n            id=\"name\"\r\n            name=\"name\"\r\n            placeholder=\"Jean Dupont\"\r\n            required\r\n            class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-400\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label for=\"username\" class=\"block text-gray-700 dark:text-gray-300 mb-1\">Nom d'utilisateur</label>\r\n          <input\r\n            v-model=\"username\"\r\n            type=\"text\"\r\n            id=\"username\"\r\n            name=\"username\"\r\n            placeholder=\"jeandupont\"\r\n            required\r\n            class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-400\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label for=\"email\" class=\"block text-gray-700 dark:text-gray-300 mb-1\">Email</label>\r\n          <input\r\n            v-model=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"jean.dupont@email.com\"\r\n            required\r\n            autocomplete=\"email\"\r\n            class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-400\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label for=\"plainPassword\" class=\"block text-gray-700 dark:text-gray-300 mb-1\">Mot de passe</label>\r\n          <input\r\n            v-model=\"plainPassword\"\r\n            type=\"plainPassword\"\r\n            id=\"plainPassword\"\r\n            name=\"plainPassword\"\r\n            placeholder=\"********\"\r\n            required\r\n            autocomplete=\"new-plainPassword\"\r\n            class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-400\"\r\n          />\r\n        </div>\r\n         <div>\r\n          <label for=\"plainPasswordConfirmation\" class=\"block text-gray-700 dark:text-gray-300 mb-1\">Confirmer le mot de passe</label>\r\n          <input\r\n            v-model=\"plainPasswordConfirmation\"\r\n            type=\"plainPassword\"\r\n            id=\"plainPasswordConfirmation\"\r\n            name=\"plainPasswordConfirmation\"\r\n            placeholder=\"********\"\r\n            required\r\n            autocomplete=\"new-plainPassword\"\r\n            class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-400\"\r\n          />\r\n        </div>\r\n\r\n        <p v-if=\"localError\" class=\"text-red-500 text-sm text-center\">{{ localError }}</p>\r\n        <p v-if=\"mutationError\" class=\"text-red-500 text-sm text-center\">\r\n            Erreur d'inscription: {{ mutationError.message }}\r\n        </p>\r\n         <p v-if=\"successMessage\" class=\"text-green-500 text-sm text-center\">\r\n            {{ successMessage }}\r\n        </p>\r\n\r\n        <button\r\n          type=\"submit\"\r\n          :disabled=\"loading\"\r\n          class=\"w-full bg-indigo-500 text-white py-2 rounded hover:bg-indigo-600 transition disabled:opacity-50 flex items-center justify-center\"\r\n        >\r\n          <svg v-if=\"loading\" class=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n            <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\r\n            <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n          </svg>\r\n          {{ loading ? 'Inscription en cours...' : 'S\\'inscrire' }}\r\n        </button>\r\n      </form>\r\n\r\n       <p class=\"text-center mt-4 text-sm text-gray-600 dark:text-gray-400\">\r\n         Déjà un compte ?\r\n         <router-link to=\"/login\" class=\"font-medium text-indigo-600 dark:text-indigo-400 hover:underline\">\r\n           Connectez-vous ici\r\n         </router-link>\r\n       </p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport { useMutation } from '@vue/apollo-composable';\r\nimport gql from 'graphql-tag';\r\n\r\n// --- State ---\r\nconst name = ref('');\r\nconst username = ref('');\r\nconst email = ref('');\r\nconst plainPassword = ref('');\r\nconst plainPasswordConfirmation = ref('');\r\nconst localError = ref(null); // Pour les erreurs de validation côté client\r\nconst successMessage = ref(null); // Pour afficher un message de succès\r\n\r\nconst router = useRouter();\r\n\r\n// --- GraphQL Mutation ---\r\n// IMPORTANT: Adaptez cette mutation à votre schéma GraphQL backend !\r\n// Les noms des champs (name, username, email, password) et le nom de la mutation (registerUser)\r\n// doivent correspondre exactement à ce que votre API attend.\r\nconst CREATE_USER_MUTATION = gql`\r\n  mutation createUser($name: String!, $username: String!, $email: String!, $plainPassword: String!) {\r\n    createUser(input: { name: $name, username: $username, email: $email, plainPassword: $plainPassword }) {\r\n      # Demandez les champs dont vous avez besoin après l'inscription\r\n      # Par exemple, juste un message de succès ou l'ID de l'utilisateur\r\n      # Si votre mutation renvoie l'utilisateur, vous pouvez demander :\r\n       user {\r\n          id\r\n         email\r\n         name\r\n         username\r\n    }\r\n  }\r\n  }\r\n`;\r\n\r\nconst {\r\n  mutate: executeCreate,\r\n  loading,\r\n  error: mutationError, // Erreurs venant d'Apollo / du serveur\r\n  onDone, // Callback en cas de succès de la mutation\r\n  onError // Callback en cas d'erreur de la mutation\r\n} = useMutation(CREATE_USER_MUTATION);\r\n\r\n// --- Methods ---\r\nconst handleRegister = async () => {\r\n  localError.value = null; // Réinitialiser les erreurs locales\r\n  successMessage.value = null; // Réinitialiser le message de succès\r\n\r\n  // 1. Validation côté client (simple)\r\n  if (!name.value || !username.value || !email.value || !plainPassword.value || !plainPasswordConfirmation.value) {\r\n    localError.value = 'Veuillez remplir tous les champs.';\r\n    return;\r\n  }\r\n  if (plainPassword.value !== plainPasswordConfirmation.value) {\r\n    localError.value = 'Les mots de passe ne correspondent pas.';\r\n    return;\r\n  }\r\n  if (plainPassword.value.length < 8) { // Exemple de règle de mot de passe\r\n     localError.value = 'Le mot de passe doit contenir au moins 8 caractères.';\r\n     return;\r\n  }\r\n\r\n  // 2. Exécuter la mutation\r\n  try {\r\n    await executeCreate({\r\n      name: name.value,\r\n      username: username.value,\r\n      email: email.value,\r\n      plainPassword: plainPassword.value,\r\n      // Ne pas envoyer passwordConfirmation au backend sauf si l'API le demande explicitement\r\n    });\r\n\r\n    // Le callback onDone sera appelé si la mutation réussit (pas d'erreur réseau ou GraphQL)\r\n\r\n  } catch (e) {\r\n     // Les erreurs réseau ou de configuration sont attrapées ici\r\n     // Les erreurs GraphQL sont gérées par onError ou disponibles dans `mutationError`\r\n     console.error(\"Erreur lors de l'appel de la mutation:\", e);\r\n     // On peut définir une erreur locale générique si mutationError n'est pas déjà défini par onError\r\n     if (!mutationError.value) {\r\n         localError.value = \"Une erreur inattendue s'est produite.\";\r\n     }\r\n  }\r\n};\r\n\r\n// 3. Gérer le succès de la mutation\r\nonDone(result => {\r\n  console.log('Inscription réussie:', result.data);\r\n  const user = result.data?.createUser?.user;\r\n  if (user) {\r\n    successMessage.value = `Bienvenue ${user.name} ! Ton compte a été créé avec succès.`;\r\n  } else {\r\n    successMessage.value = 'Inscription réussie.';\r\n  }\r\n\r\n  // Vider le formulaire\r\n  name.value = '';\r\n  username.value = '';\r\n  email.value = '';\r\n  plainPassword.value = '';\r\n  plainPasswordConfirmation.value = '';\r\n\r\n  // Redirection après 3 secondes\r\n  setTimeout(() => {\r\n    router.push('/login');\r\n  }, 3000);\r\n});\r\n\r\n\r\n// 4. Gérer les erreurs GraphQL spécifiques (optionnel mais recommandé)\r\nonError(error => {\r\n  console.error(\"Erreur GraphQL lors de l'inscription:\", error);\r\n  // mutationError est automatiquement mis à jour, mais vous pouvez ajouter une logique ici si nécessaire\r\n  // Par exemple, si l'email existe déjà, le backend pourrait renvoyer une erreur spécifique\r\n  // que vous pourriez afficher de manière plus conviviale que le message brut.\r\n  localError.value = null; // Efface les erreurs locales précédentes si une erreur serveur survient\r\n});\r\n\r\n</script>\r\n\r\n<style scoped>\r\n/* Styles spécifiques si nécessaire */\r\n</style>\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA,UAAM,OAAO,IAAI,EAAE;AACnB,UAAM,WAAW,IAAI,EAAE;AACvB,UAAM,QAAQ,IAAI,EAAE;AACpB,UAAM,gBAAgB,IAAI,EAAE;AAC5B,UAAM,4BAA4B,IAAI,EAAE;AACxC,UAAM,aAAa,IAAI,IAAI;AAC3B,UAAM,iBAAiB,IAAI,IAAI;AAE/B,UAAM,SAAS,UAAS;AAMxB,UAAM,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB7B,UAAM;AAAA,MAEJ;AAAA,MACA,OAAO;AAAA;AAAA,MACP;AAAA;AAAA,MACA;AAAA;AAAA,IACF,IAAI,YAAY,oBAAoB;AA6CpC,WAAO,YAAU;;AACf,cAAQ,IAAI,wBAAwB,OAAO,IAAI;AAC/C,YAAM,QAAO,kBAAO,SAAP,mBAAa,eAAb,mBAAyB;AACtC,UAAI,MAAM;AACR,uBAAe,QAAQ,aAAa,KAAK,IAAI;AAAA,MACjD,OAAS;AACL,uBAAe,QAAQ;AAAA,MACxB;AAGD,WAAK,QAAQ;AACb,eAAS,QAAQ;AACjB,YAAM,QAAQ;AACd,oBAAc,QAAQ;AACtB,gCAA0B,QAAQ;AAGlC,iBAAW,MAAM;AACf,eAAO,KAAK,QAAQ;AAAA,MACrB,GAAE,GAAI;AAAA,IACT,CAAC;AAID,YAAQ,WAAS;AACf,cAAQ,MAAM,yCAAyC,KAAK;AAI5D,iBAAW,QAAQ;AAAA,IACrB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}