{"file":"login.vue.mjs","mappings":";;;;;;;;;AAqFc,aAAS;AACR,cAAU;AAanB,UAAA,QAAQ,IAAI,EAAE;AACd,UAAA,WAAW,IAAI,EAAE;AACjB,UAAA,aAAa,IAAI,IAAI;AACrB,UAAA,gBAAgB,IAAI,IAAI;AAG9B,UAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAejB,UAAA;AAAA,MAEJ;AAAA,IAEF,IAAI,YAAY,cAAc;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["../../../../pages/login.vue"],"sourcesContent":["<template>\r\n  <div class=\"min-h-screen flex flex-col md:flex-row items-center justify-center dark:bg-yellow-900 bg-gray-900 rounded-lg\">\r\n    <div class=\"bg-white text-black shadow-lg rounded-lg p-8 w-full max-w-md\">\r\n      <h1 class=\"underline font-bold text-center mb-4 text-green-900\">\r\n        Bienvenue sur le  de Gestion des Tâches\r\n      </h1>\r\n\r\n      <h2 class=\"text-center text-gray-700 mb-6\">\r\n        Connectez-vous pour bénéficier de nos services\r\n      </h2>\r\n      <h2 class=\"bg-red-700\">je n'est pas de conte MANAGETASKS<a></a></h2>\r\n\r\n      <!-- Message de chargement -->\r\n      <p v-if=\"loading\" class=\"text-center text-gray-500\">Connexion en cours...</p>\r\n\r\n      <!-- Formulaire de connexion -->\r\n      <form v-else @submit.prevent=\"handleLogin\" class=\"space-y-4\">\r\n        <!-- Champ Email -->\r\n        <div>\r\n          <label for=\"email\" class=\"block text-gray-700 mb-1\">Email</label>\r\n          <input\r\n            v-model=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"exemple@mail.com\"\r\n            autocomplete=\"email\"\r\n            class=\"w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-red-400\"\r\n          />\r\n        </div>\r\n\r\n        <!-- Champ Mot de passe -->\r\n        <div>\r\n          <label for=\"password\" class=\"block text-gray-700 mb-1\">Mot de passe</label>\r\n          <input\r\n            v-model=\"password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"********\"\r\n            autocomplete=\"current-password\"\r\n            class=\"w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-red-400\"\r\n          />\r\n        </div>\r\n\r\n        <!-- Bouton de connexion -->\r\n        <button\r\n          type=\"submit\"\r\n          :disabled=\"loading\"\r\n          class=\"w-full bg-red-500 text-white py-2 rounded hover:bg-red-600 transition disabled:opacity-50\"\r\n        >\r\n          Se connecter\r\n        </button>\r\n\r\n        <!-- Bouton Google -->\r\n        <button\r\n          type=\"button\"\r\n          class=\"w-full bg-white border border-gray-300 text-gray-700 py-2 rounded flex items-center justify-center mt-2 hover:bg-gray-50\"\r\n          @click=\"loginWithGoogle\"\r\n        >\r\n          <img\r\n            src=\"https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg\"\r\n            alt=\"Google\"\r\n            class=\"w-5 h-5 mr-2\"\r\n          />\r\n          Se connecter avec Google\r\n        </button>\r\n\r\n        <!-- Affichage des erreurs -->\r\n        <p v-if=\"mutationError || localError\" class=\"text-red-600 text-center mt-2\">\r\n          {{ mutationError ? mutationError.message : localError }}\r\n        </p>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script setup>\r\n// Importation des composables Vue & Apollo\r\n import { ref } from 'vue'\r\n// Correction: Importer useRoute explicitement si ce n'est pas global\r\nimport { useRoute, useRouter } from 'vue-router'\r\nimport { useMutation, useApolloClient } from '@vue/apollo-composable'\r\nimport gql from 'graphql-tag'\r\nimport { onMounted } from 'vue'\r\n \r\nconst route = useRoute();\r\nconst router = useRouter();\r\n\r\nonMounted(() => {\r\n  // Vérifie si un token est présent dans l'URL (après redirection Google)\r\n  const params = new URLSearchParams(window.location.search)\r\n  const token = params.get('token')\r\n  if (token) {\r\n    localStorage.setItem('auth_token', token)\r\n    // Rediriger vers une page appropriée après connexion Google\r\n    router.push('/infolink') // ou '/tache' si c'est plus pertinent\r\n  }\r\n})\r\n// Champs réactifs du formulaire\r\nconst email = ref('')\r\nconst password = ref('')\r\nconst localError = ref(null)        // Erreurs de validation côté client\r\nconst mutationError = ref(null)     // Erreurs renvoyées par le backend\r\n\r\n// Définition de la mutation GraphQL pour le login\r\nconst LOGIN_MUTATION = gql`\r\n  mutation Login($email: String!, $password: String!) {\r\n    loginUser(input: {\r\n      email: $email,\r\n      password: $password\r\n    }) {\r\n      user {\r\n        id      # Assurez-vous que l'ID est bien retourné par la mutation\r\n        token\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\n// Utilisation de la mutation\r\nconst {\r\n  mutate: executeLogin,\r\n  loading,\r\n  error: apolloError // Renommé pour éviter conflit avec l'erreur générale\r\n} = useMutation(LOGIN_MUTATION)\r\n\r\n//Fonction pour la connexion avec Google\r\nconst loginWithGoogle = () => {\r\n  // Redirige vers l'endpoint backend qui initie l'OAuth2 Google\r\n  // Assurez-vous que l'URL est correcte (http ou https, port)\r\n  window.location.href = 'https://localhost:8000/auth/google';\r\n}\r\n\r\n// Fonction appelée lors de la soumission du formulaire\r\nconst handleLogin = async () => {\r\n  localError.value = null\r\n  mutationError.value = null // Réinitialise l'erreur de mutation\r\n\r\n  // Validation simple\r\n  if (!email.value || !password.value) {\r\n    localError.value = 'Veuillez remplir tous les champs.'\r\n    return\r\n  }\r\n\r\n  try {\r\n    // Exécution de la mutation avec les données du formulaire\r\n    const result = await executeLogin({\r\n      email: email.value,\r\n      password: password.value,\r\n    })\r\n\r\n    // Récupération du token JWT et userId\r\n    // Le chaînage optionnel (?.) est une bonne pratique ici\r\n    const token = result?.data?.loginUser?.user?.token\r\n    const userId = result?.data?.loginUser?.user?.id\r\n\r\n    // Vérifie si le token ou userId manquent après la connexion\r\n    if (!token) {\r\n      // Si la mutation réussit mais ne renvoie pas de token (cas étrange)\r\n      throw new Error('Token non reçu depuis le serveur.')\r\n    }\r\n    if (!userId) {\r\n        // Il est possible que la connexion ait réussi mais n'ait pas retourné d'ID\r\n        throw new Error('User ID non reçu depuis le serveur après la connexion.');\r\n    }\r\n\r\n    // Stockage du token en local (localStorage ou cookies)\r\n    // Utilise la variable token directement, c'est plus propre que route.query.token ici\r\n    localStorage.setItem('auth_token', token)\r\n\r\n    // Utilisation du token pour requêter les infos de l'utilisateur\r\n    const apolloClient = useApolloClient().client\r\n    const meResult = await apolloClient.query({\r\n      // --- REQUÊTE CORRIGÉE ---\r\n      query: gql`\r\n        query GetUserById($id: ID!) { # 1. Déclare la variable $id de type ID! (requis)\r\n          user(id: $id) {            # 2. Utilise la variable $id comme argument 'id'\r\n            id\r\n            email\r\n            username\r\n            name\r\n            # Ajoutez d'autres champs si nécessaire\r\n          }\r\n        }\r\n      `,\r\n      // --- FIN DE LA REQUÊTE CORRIGÉE ---\r\n      variables: {\r\n        id: userId // Ceci correspond maintenant correctement à la variable $id dans la requête\r\n      },\r\n      fetchPolicy: 'network-only', // Pour éviter d'utiliser un cache obsolète\r\n    })\r\n\r\n    // Vérifiez si meResult.data.user existe avant de l'utiliser\r\n    if (meResult?.data?.user) {\r\n        console.log(\"Utilisateur connecté :\", meResult.data.user)\r\n        // Vous pouvez stocker les infos utilisateur si nécessaire (Pinia, Vuex, etc.)\r\n    } else {\r\n        // Gérer le cas où l'utilisateur n'est pas trouvé même avec l'ID\r\n        console.warn(\"Impossible de récupérer les détails de l'utilisateur avec l'ID:\", userId);\r\n        // Peut-être afficher un message à l'utilisateur ou juste continuer\r\n    }\r\n\r\n\r\n    // Redirection après connexion réussie\r\n    await router.push('/infolink') // Ou une autre page appropriée\r\n\r\n  } catch (err) {\r\n    console.error('Erreur de connexion :', err)\r\n    // Assurez-vous de gérer également les erreurs potentielles de la deuxième requête\r\n    // apolloError concerne uniquement le hook useMutation\r\n    // err attrapera les erreurs des deux appels await (executeLogin et apolloClient.query)\r\n    // Utilisez err.message pour obtenir un message d'erreur plus clair si disponible\r\n    mutationError.value = apolloError.value?.message || err.message || 'Une erreur inconnue est survenue.'\r\n  }\r\n}\r\n\r\n</script>\r\n"],"version":3}